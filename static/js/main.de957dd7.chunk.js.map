{"version":3,"sources":["helpers/utils.ts","model/ForecastModel.ts","model/InvestmentModel.ts","renderer/D3ChartStrategy.ts","renderer/CashflowBarChartD3.ts","renderer/AreaChartD3.ts","renderer/ConfidenceChartD3.ts","components/Visualization.tsx","components/ErrorMessageComponent.tsx","components/TextInputElement.tsx","components/CheckboxInputElement.tsx","components/APIKeyOverlay.tsx","components/SidebarSectionHeadingComponent.tsx","components/BrokerDropDown.tsx","components/GraphDetailDropDown.tsx","components/ETFSelectionDropDown.tsx","components/ConfidenceElement.tsx","components/App.tsx","reportWebVitals.js","index.js"],"names":["timeDiffIgnoreDivisor","numberOfMonthsOfAYear","percentageToFloat","value","Number","isNaN","isPercentage","val","isFirstMonthOfAYear","date","getMonth","loadHistoricalETFData","etfIdentifier","apiKey","a","d3","entry","undefined","timestamp","Error","Date","toString","dividend","parseFloat","course","historicalData","sort","b","valueOf","etfHistoricalToCourseForecastArray","map","dateToTimestamp","etfHistoricalToDividendForecastArray","currentYear","getFullYear","dividendForecastArray","forEach","length","push","Math","floor","getTime","generateHistoricalDataNotPresentException","roundDateToBeginningOfMonth","month","year","currentDayOfMonth","getDate","maxDayOfMonth","monthOffset","round","ForecastModelSingleton","coursePredictors","dividendPredictors","this","courseForecastArray","maxTimestampBeforeCoursePredictorRepetition","_calculateTimestampForPredictorRepetition","maxYearBeforeDividendPredictorRepetition","history","predictors","forecastArray","lastTimestampToIncludeInPrediction","abs","backCastTimeFactor","backCastTimestampConstant","filteredForecastArray","filter","regression","linear","order","precision","lastYearToIncludeInPrediction","confidence","startDate","_courseDateToPredictorTimestampAndDateTimestamp","predictorTimestamp","startingTimestamp","_createCoursePredictorIfNotPresent","eq","equation","confidenceFactor","startingPrice","predictorYear","_dividendYearToPredictorYear","_createDividendPredictorIfNotPresent","max","predict","backCastTimeConstant","backCastTimeDate","setMonth","instance","getInstance","etfProperties","configure","forecast","_loadAndCacheHistoricalETFData","symbol","console","log","firstTimestamp","lastTimestamp","partialExemption","corporateTaxRatio","getTotalShareValue","investmentStep","totalShares","sharePrices","getTotalDividendShareValue","dividendTotalShares","getNewShareValue","newShares","getSumNewPayout","sumNewPayout","Object","keys","newPayout","getNextMonthDate","newDate","calculateDividend","initialDate","isLastMonthOfAYear","dividendAmount","predictDividend","sharePrice","predictCourse","calculateCosts","amount","costConfiguration","costs","percentageCosts","fixedCosts","amountWithoutCosts","subtractTaxFreeGain","taxAmount","taxFreeAmount","sumOfTotalValues","sum","calculateAndAddInflation","sumTotalValues","timeFactor","inflation","pow","calculateAmountIncrease","percentageIncrease","numberOfMonths","yearsSinceStart","calculateVorabpauschaleTaxes","investmentSteps","leftoverTaxFreeAmount","etfToRatio","min","summedTaxes","decemberInvestmentStep","firstInvestmentStepOfThisYear","distributionsOfETF","distributingNewAmount","accumulatedBasicProfit","i","profitOverAllTime","totalInvestedMoney","profitOfPreviousYears","amountToApplyTaxes","addSavingPhaseMonth","investment","configOptions","useDistributingModel","prevInvestmentStep","newInvestmentStep","cloneDeep","newInvestment","investmentOfEtfWithCosts","costConfig","investmentOfEtfWithoutCosts","newInvestedMoney","etfSharePrice","dividendPayoutMoneyPerShare","dividendPayoutMoney","leftoverDividendPayoutMoneyBrutto","dividendPayoutMoneyBrutto","taxesToPay","totalTaxes","newSharesByDividend","dividendNewShares","totalCosts","newTaxes","addPayoutMonth","sellingAmount","leftoverAlreadyPaidTaxes","payoutStats","taxes","amountToSell","dividendPayout","distributingAmountUsableForPayout","amountUsedByDistribution","amountAlreadySold","investmentStepsIdx","costsToPay","alreadyPaidCosts","payoutInvestmentStepIdxForFIFO","currentSharesLeft","alreadySoldShares","currentInvestmentStepForFIFO","leftoverAmountToSell","currentValueOfShares","amountToSellWithCosts","amountOfSharesToSell","amountToSellWithoutCosts","initialValueOfShares","amountToPayTaxes","payoutAmount","totalPayout","amountOfDividendSharesLeft","amountOfDividendSharesSold","generateEmptyInvestmentStep","dummyData","ESGE","SUSA","emptyInvestmentStep","InvestmentModel","startCapital","monthlyInvestment","yearlyInvestmentIncrease","monthlyPayout","yearlyPayoutIncrease","savingPhaseLength","age","expectationOfLife","savingDates","payoutDates","_calculateDatesForModel","_calculateModel","lifeExpectation","fadeOutYears","yearsLeft","now","beginningDate","endSavingPhaseDate","setFullYear","endDate","calculateForecastInterval","currentDate","slice","numberOfEntriesPerYear","isInteger","selectedInvestmentSteps","numberOfMonthsToMerge","adjustedInvestmentStep","offset","ONE_MILLION","generateLabel","name","charAt","toUpperCase","replace","D3ChartStrategy","renderDivRef","payoutPhaseStartDate","svgID","tooltipDate","yExtent","captionSpace","width","height","marginW","marginH","textProperties","lineStrokeWidth","contentOpacity","valueTextOffset","standardFontSize","labelValueIdentifier","deltaIdentifier","monospaceFont","standardFont","startTextAnchor","endTextAnchor","boldText","normalText","totalColor","totalIdentifier","dateExtent","maxIndex","minIndex","xTextOffset","yScale","xScale","dataArray","svg","fadeOutGradientID","fadeOutYearsLength","gridOpacity","gridColor","gridStrokeWidth","labelDivisionFactor","numberIndicator","hoverLine","interaction","textGroup","xAxis","yAxis","constructor","activeStrategies","innerHTML","append","attr","_prepareData","_calculateExtents","_createScales","_createAxis","_drawGrid","_drawContent","_drawFadeOut","_prepareText","_drawText","_drawAxis","_addInteraction","_updateAllDiagrams","hasToBePositive","skipDecimalPlaces","decimalPlaces","valueToDisplayNumber","toLocaleString","maximumFractionDigits","minimumFractionDigits","identifier","property","text","x","y","fontSize","fontFamily","textAnchor","fontWeight","color","d","lastImportantDateForYScale","filteredDataArrayForYMax","e","filteredDataArrayForYMin","maxVal","yStart","minVal","yEnd","domain","range","ticks","every","tick","tickFormat","valueToDisplayText","gridGroup","yGridGroup","xGridGroup","selectAll","data","enter","style","call","on","_setInteractionVisibilityForActiveDiagrams","mouseEvent","_handleTooltipEvent","invert","investmentStepIndex","firstDate","secondDate","numberOfMonthsSinceStartDate","numberOfMonthsPerInvestmentStep","calculateInvestmentStepIndexForDate","activeDiagram","_updateTooltip","_updateDiagram","values","savingPhaseMid","payoutPhaseMid","yPos","addTextProperty","fadeOutGroup","fadeOutStartDate","gradient","displayOption","payoutIdentifier","investedIdentifier","cashflowChartColors","payout","first","second","invested","CashflowBarChart","barPaddingPercentage","rectWidth","dataToIndex","startYear","colorIdentifier","payoutValue","investedValue","needToSkipLastBar","barArray","AreaChartD3","etfRatio","subtractInflationFromTotal","previousInvestmentSteps","etfLineColors","total","totalValueIndex","negativeColors","negativeLabels","capitalIdentifier","etfIdentifiers","ratio","currentIdx","heightOffset","totalShareValue","totalDividendShareValue","datum","_drawArea","_drawLines","curve","y0","y1","paddingH","addNegativeLabels","addETFLabels","addTotalLabel","yOffset","xPadding","addDeltaLabels","xRowOffset","addDeltaHeadingText","addNegativeDeltaLabels","addETFDeltaLabels","totalRowYPos","addTotalDeltaLabel","addPayoutAndInvestedDeltaLabels","numberOfEntriesPerRow","ETF_SYMBOL_TO_NAME","totalValue","negativeLabel","currentTotalValue","currentInvestedValue","previousTotalValue","previousPayout","currentPayout","previousInvested","currentInvested","textPropertyIdentifier","includes","ConfidenceChartD3","minInvestmentSteps","maxInvestmentSteps","confidenceAreaOpacity","confidenceColors","minimumLine","maximumLine","middleLine","area","idx","areaConfidence","lineDataArray","lookupIdentifier","_","j","Visualization","firstSVGRef","React","createRef","secondSVGRef","trendChart","cashflowChart","investmentModel","etfIdentifierToRatio","props","etfDropdownSelection","elements","selected","confidenceIdentifier","TAX_FREE_AMOUNT_IDENTIFIER","generateCostConfig","STARTING_CAPITAL_IDENTIFIER","MONTHLY_INVESTMENT_IDENTIFIER","YEARLY_INVESTMENT_INCREASE_IDENTIFIER","MONTHLY_PAYOUT_IDENTIFIER","YEARLY_PAYOUT_INCREASE_IDENTIFIER","SAVING_PHASE_IDENTIFIER","AGE_IDENTIFIER","LIFE_EXPECTATION_IDENTIFIER","USE_DISTRIBUTION_MODEL","diagram","Y_AXIS_LOCK_IDENTIFIER","reset","isValid","current","_getETFIdentifierToRatio","getInvestmentSteps","DETAILED_GRAPH_DROPDOWN_IDENTIFIER","_getInvestmentModel","MIDDLE_CONFIDENCE","firstPayoutPhaseDate","getPayoutPhaseBeginDate","correctLevelOfDetailInvestmentSteps","_getTooltipDate","USE_CONFIDENCE_VISUALIZATION","MIN_CONFIDENCE","MAX_CONFIDENCE","_getYAxisExtent","INFLATION_USED_FOR_TOTAL","render","error","_drawVisualization","Fragment","ref","Component","ErrorMessage","id","className","visibility","errorMessage","InputLabel","noLabel","textAppending","htmlFor","label","TextOrNumberInputElement","isNumericInput","type","onChange","onValueChange","target","disabled","ETFTextInputElement","CheckboxInputElement","Overlay","displayOverlay","href","rel","onClick","handleAPIKeyConfirm","SidebarSectionHeading","titleID","title","initiallyCollapsed","children","costsOfElementMatchUIValues","element","BrokerDropDown","handleChange","GraphDetailDropDown","ETFSelectionDropDown","elementIdentifier","HTMLInputElement","handleSelectionChange","handleShareChange","autoPercentage","ConfidenceElement","minConfidence","maxConfidence","middleConfidence","step","TRANSACTION_PERCENTAGE_COSTS_IDENTIFIER","TRANSACTION_FIXED_COSTS_IDENTIFIER","ETF_DROPDOWN_SELECTION_IDENTIFIER","API_KEY_IDENTIFIER","BROKER_DROPDOWN_IDENTIFIER","ETF_AUTOMATIC_PERCENTAGE_IDENTIFIER","state","transformPercentageToFloat","recalculateETFPercentages","numberOfSelectedETFs","newPercentage","App","handleTextChange","bind","handleCheckBoxChange","handleBrokerChange","handleGraphDetailChange","handleETFSelectionChange","handleETFShareChange","caller","S_and_P_500","iShare","msciUSA","getInitialInputFormState","params","URLSearchParams","window","location","search","has","get","pullAlphavantageKeyFromURL","changedValue","changedStateIdentifier","stateIsNumber","_validateAndSetState","brokerProperties","detailProperties","changedETFIdentifier","apiValues","loadHistoricData","urlParams","urlWithoutParams","split","set","replaceState","setState","forceUpdate","positiveIntIdentifiers","percentageIdentifiers","leftoverYears","sumOfPercentages","foundOneSelectedEtf","noValidate","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.de957dd7.chunk.js","sourcesContent":["import * as d3 from 'd3';\n\nimport { DataPoint } from 'regression';\n\n// Ignore milliseconds, seconds, minutes, hours.\nconst timeDiffIgnoreDivisor = 1000 * 60 * 60 * 24;\n\nexport const timestampIndexOfForecastArray = 0;\nexport const courseIndexOfForecastArray = 1;\nexport const numberOfMonthsOfAYear = 12;\nexport const inflationRate = 0.01;\n\nexport interface IHistoricEntry {\n    date: Date;\n    dividend: number;\n    course: number;\n}\n\n/**\n * Converts the percentage to a float and return 0 in the case the number is NaN.\n *\n * @param value The concerning value.\n * @returns The value as a float.\n */\nexport function percentageToFloat(value: number) {\n    return Number.isNaN(value) ? 0.0 : value / 100;\n}\n\n/**\n * Returns if the given value is a valid percentage.\n * Meaning that the value is between 0 and 100 and is not NaN.\n *\n * @param val The concerning value.\n * @returns If the value is a valid percentage.\n */\nexport function isPercentage(val: number): boolean {\n    return !Number.isNaN(val) && val >= 0.0 && val <= 100.0;\n}\n\n/**\n * Returns if the given value is a valid integer.\n * Meaning that the value is an integer and is not NaN.\n *\n * @param val The concerning value.\n * @returns If the value is a valid integer.\n */\nexport function isPositiveInt(val: number): boolean {\n    return !Number.isNaN(val) && Number.isInteger(val) && val >= 0;\n}\n\n/**\n * Checks if the date is the last month of a year i.e. December.\n *\n * @param date The date to check.\n * @returns Is the date in December.\n */\nexport function isLastMonthOfAYear(date: Date): boolean {\n    return date.getMonth() === numberOfMonthsOfAYear - 1;\n}\n\n/**\n * Checks if the date is the first month of a year i.e. January.\n *\n * @param date The concerning date.\n * @returns Is the date in January.\n */\nexport function isFirstMonthOfAYear(date: Date): boolean {\n    return date.getMonth() === 0;\n}\n\n/**\n * Clamps the given value into the given min-max range.\n *\n * @param value Value to clamp.\n * @param min Minimum value.\n * @param max Maximum value.\n * @returns\n */\nexport function clamp(value: number, min: number, max: number): number {\n    return Math.max(min, Math.min(value, max));\n}\n\n/**\n * Loads the historic data of the ETF by downloading and parsing it from the [Alphavantage](https://www.alphavantage.co/) API.\n *\n * @param etfIdentifier The ETF identifier (symbol) by [Alphavantage](https://www.alphavantage.co/).\n * @param apiKey The personal API [Alphavantage](https://www.alphavantage.co/) key.\n * @returns The sorted array with the historic entries.\n */\nexport async function loadHistoricalETFData(etfIdentifier: string, apiKey: string): Promise<IHistoricEntry[]> {\n    const historicalData = await d3.csv(\n        `https://www.alphavantage.co/query?function=TIME_SERIES_MONTHLY_ADJUSTED&symbol=${etfIdentifier}&apikey=${apiKey}&datatype=csv`,\n        entry => {\n            if (\n                entry.timestamp === undefined ||\n                entry['dividend amount'] === undefined ||\n                entry['adjusted close'] === undefined\n            ) {\n                throw new Error(`The history of ${etfIdentifier} contained an undefined field.`);\n            }\n            return {\n                date: new Date(entry.timestamp.toString()),\n                dividend: parseFloat(entry['dividend amount']),\n                course: parseFloat(entry['adjusted close']),\n            };\n        }\n    );\n    historicalData.sort((a, b) => a.date.valueOf() - b.date.valueOf());\n    return historicalData;\n}\n\n/**\n * Constructs a course forecasting array which consists of [Date, CourseValue] pairs.\n * The historical data needs to be sorted by the date. Which is already done when loading.\n *\n * @param historicalData The historical data array that should be used for the course forecasting array.\n * @returns The forecasting Array of [Date, CourseValue] pairs.\n */\nexport function etfHistoricalToCourseForecastArray(historicalData: IHistoricEntry[]): DataPoint[] {\n    return historicalData.map(entry => [dateToTimestamp(entry.date), entry.course]);\n}\n\n/**\n * Constructs a dividend forecasting array which consists of [Year, DividendValue] pairs.\n * The historical data needs to be sorted by the date. Which is already done when loading.\n *\n * @param historicalData The historical data array that should be used for the course forecasting array.\n * @returns The forecasting Array of [Year, CourseValue] pairs.\n */\nexport function etfHistoricalToDividendForecastArray(historicalData: IHistoricEntry[]): DataPoint[] {\n    let currentYear = historicalData[0].date.getFullYear();\n    const dividendForecastArray: DataPoint[] = [[currentYear, 0]];\n    historicalData.forEach(entry => {\n        if (entry.date.getFullYear() === currentYear) {\n            dividendForecastArray[dividendForecastArray.length - 1][courseIndexOfForecastArray] += entry.dividend;\n        } else {\n            currentYear = entry.date.getFullYear();\n            dividendForecastArray.push([currentYear, entry.dividend]);\n        }\n    });\n    dividendForecastArray.sort((a, b) => a[timestampIndexOfForecastArray] - b[timestampIndexOfForecastArray]);\n    return dividendForecastArray;\n}\n\n/**\n * Converts the date to a timestamp in the used format.\n * A timestamp is a unix timestamp which counts days instead of milliseconds.\n *\n * @param date The concerning Date.\n * @returns The corresponding timestamp.\n */\nexport function dateToTimestamp(date: Date): number {\n    return Math.floor(date.getTime() / timeDiffIgnoreDivisor);\n}\n\n/**\n * Converts the timestamp to a Date in the used format.\n * A timestamp is a unix timestamp which counts days instead of milliseconds.\n *\n * @param date The concerning timestamp.\n * @returns The corresponding Date.\n */\nexport function timestampToDate(timestamp: number): Date {\n    return new Date(timestamp * timeDiffIgnoreDivisor);\n}\n\n/**\n * Generates a specific error for the given ETF identifier which is used to\n * indicate that the historic data needs to be loaded before forecasting for that etf is available.\n *\n * @param etfIdentifier The Identifier of the ETF.\n * @returns The error object.\n */\nexport function generateHistoricalDataNotPresentException(etfIdentifier: string): Error {\n    return new Error(`First call loadHistoricalDataIfNotPresent() before predicting: ${etfIdentifier}`);\n}\n\n/**\n * Calculates the number of days in the given month and year.\n * Based on: https://stackoverflow.com/a/315767\n *\n * @param month The concerning Month.\n * @param year The concerning Year.\n * @returns The number of days of that month.\n */\nfunction daysInMonth(month: number, year: number): number {\n    return new Date(year, month + 1, 0).getDate();\n}\n\n/**\n * Rounds the given date to the first day of that or the next month.\n *\n * @param date The concerning date.\n * @returns The rounded Date.\n */\nexport function roundDateToBeginningOfMonth(date: Date): Date {\n    const currentDayOfMonth = date.getDate();\n    const maxDayOfMonth = daysInMonth(date.getMonth(), date.getFullYear());\n    const monthOffset = Math.round(currentDayOfMonth / maxDayOfMonth);\n    return new Date(date.getFullYear(), date.getMonth() + monthOffset);\n}\n","import regression from 'regression';\nimport { DataPoint } from 'regression';\nimport {\n    dateToTimestamp,\n    etfHistoricalToCourseForecastArray,\n    etfHistoricalToDividendForecastArray,\n    loadHistoricalETFData,\n    timestampIndexOfForecastArray,\n    courseIndexOfForecastArray,\n    generateHistoricalDataNotPresentException,\n    IHistoricEntry,\n} from '../helpers/utils';\n\ninterface IDividendPredictor {\n    [timestamp: number]: regression.Result;\n}\n\ninterface IDividendPredictors {\n    maxYearBeforeDividendPredictorRepetition: number;\n    predictors: IDividendPredictor;\n}\n\ninterface ICoursePredictors {\n    maxTimestampBeforeCoursePredictorRepetition: number;\n    predictors: ICoursePredictor;\n}\n\ninterface ICoursePredictor {\n    [timestamp: number]: regression.Result;\n}\n\ninterface IETFCoursePredictors {\n    [etfIdentifier: string]: ICoursePredictors;\n}\n\ninterface IETFDividendPredictors {\n    [etfIdentifier: string]: IDividendPredictors;\n}\n\ninterface IHistoricData {\n    [etfIdentifier: string]: IHistoricDataOfETF;\n}\n\ninterface IHistoricDataOfETF {\n    courseForecastArray: DataPoint[];\n    dividendForecastArray: DataPoint[];\n    history: IHistoricEntry[];\n}\n\nexport type ETFIdentifier = 'SP5C.PAR' | 'ESGE' | 'SUSA';\n\nexport interface IETFProperty {\n    identifier: string;\n    symbol: ETFIdentifier;\n    label: string;\n    value: number;\n    selected: boolean;\n}\n\ninterface IETFProperties {\n    [etfIdentifier: string]: IETFProperty;\n}\n\n/**\n * Singleton class that provided course and dividend forecasting of ETFs.\n * It uses [Alphavantage](https://www.alphavantage.co/) to load historic data which\n * are used by a linear regression model for forecasting.\n * The father the forecast day is in the future the more historic data is used to fit the linear regression.\n * The historic data needs to be loaded before a forecast can be done.\n * Dividends are accumulated and predicted per year.\n *\n * Example Code:\n * ```typescript\n * await ForecastModelSingleton.loadHistoricData(apiKey, etfProperties);\n * const instance = ForecastModelSingleton.getInstance();\n * const predictedCourse = instance.predictCourse(etfIdentifier, futureDate);\n * const predictedDividend = instance.predictCourse(etfIdentifier, futureYear);\n * ```\n */\nexport class ForecastModelSingleton {\n    private static instance: null | ForecastModelSingleton = null;\n    private static apiKey: string = '';\n    private static backCastTimestampConstant: number = 7;\n    private static backCastTimeFactor: number = 2;\n\n    private historicalData: IHistoricData = {};\n    private coursePredictors: IETFCoursePredictors = {};\n    private dividendPredictors: IETFDividendPredictors = {};\n\n    private constructor() {}\n\n    /**\n     * Configures the forecasting by setting the concerning values and resetting the present predictors.\n     *\n     * @param apiKey The [Alphavantage](https://www.alphavantage.co/) API Key.\n     * @param backCastTimeFactor Linear forecast factor. The number of dates used for prediction is increase linear towards this factor.\n     * @param backCastTimeConstant Constant forecast Offset. Constantly increases the number of dates used for prediction.\n     */\n    static configure(apiKey: string, backCastTimeFactor = 2, backCastTimeConstant = 7): void {\n        ForecastModelSingleton.apiKey = apiKey;\n        ForecastModelSingleton.backCastTimeFactor = backCastTimeFactor;\n\n        const backCastTimeDate = new Date(0);\n        backCastTimeDate.setMonth(backCastTimeConstant);\n        ForecastModelSingleton.backCastTimestampConstant = dateToTimestamp(backCastTimeDate);\n\n        // Reset predictors if present.\n        if (ForecastModelSingleton.instance != null) {\n            const instance = ForecastModelSingleton.getInstance();\n            for (const etfIdentifier in instance.coursePredictors) {\n                instance.coursePredictors[etfIdentifier].maxTimestampBeforeCoursePredictorRepetition =\n                    ForecastModelSingleton._calculateTimestampForPredictorRepetition(\n                        instance.historicalData[etfIdentifier].courseForecastArray\n                    );\n            }\n            for (const etfIdentifier in instance.dividendPredictors) {\n                instance.dividendPredictors[etfIdentifier].maxYearBeforeDividendPredictorRepetition =\n                    ForecastModelSingleton._calculateTimestampForPredictorRepetition(\n                        instance.historicalData[etfIdentifier].dividendForecastArray\n                    );\n            }\n        }\n    }\n\n    /**\n     * Configures the Forecasting with the api key and default forecast values.\n     * Loads the historic data from all ETFs in the etfProperties.\n     *\n     * @param apiKey The [Alphavantage](https://www.alphavantage.co/) API Key.\n     * @param etfProperties The etfProperties.\n     */\n    static async loadHistoricData(apiKey: string, etfProperties: IETFProperties): Promise<void> {\n        ForecastModelSingleton.configure(apiKey);\n        const forecast = ForecastModelSingleton.getInstance();\n        for (const etfIdentifier in etfProperties) {\n            await forecast._loadAndCacheHistoricalETFData(etfProperties[etfIdentifier].symbol);\n        }\n        console.log('Finished loading the historic data.');\n    }\n\n    /**\n     * Returns the Singleton instance of this class.\n     *\n     * @returns The singleton instance.\n     */\n    static getInstance(): ForecastModelSingleton {\n        if (ForecastModelSingleton.instance == null) {\n            ForecastModelSingleton.instance = new ForecastModelSingleton();\n        }\n        return ForecastModelSingleton.instance;\n    }\n\n    /**\n     * Calculates the timestamp at which point all predictors are the same since they use all data points.\n     *\n     * @param forecastArray The concerning forecast array.\n     * @returns The timestamp where the repetition starts.\n     */\n    private static _calculateTimestampForPredictorRepetition(forecastArray: DataPoint[]): number {\n        const firstTimestamp = forecastArray[0][timestampIndexOfForecastArray];\n        const lastTimestamp = forecastArray[forecastArray.length - 1][timestampIndexOfForecastArray];\n        return lastTimestamp + (lastTimestamp - firstTimestamp) / ForecastModelSingleton.backCastTimeFactor;\n    }\n\n    /**\n     * Loads the historic data for the provided etfIdentifier and sets up the predictors.\n     *\n     * @param etfIdentifier The concerning ETFIdentifier.\n     * @returns\n     */\n    private async _loadAndCacheHistoricalETFData(etfIdentifier: string): Promise<void> {\n        if (etfIdentifier in this.historicalData) {\n            return;\n        }\n        const historicalData = await loadHistoricalETFData(etfIdentifier, ForecastModelSingleton.apiKey);\n\n        const courseForecastArray = etfHistoricalToCourseForecastArray(historicalData);\n        const maxTimestampBeforeCoursePredictorRepetition =\n            ForecastModelSingleton._calculateTimestampForPredictorRepetition(courseForecastArray);\n\n        const dividendForecastArray = etfHistoricalToDividendForecastArray(historicalData);\n        const maxYearBeforeDividendPredictorRepetition =\n            ForecastModelSingleton._calculateTimestampForPredictorRepetition(dividendForecastArray);\n\n        this.historicalData[etfIdentifier] = {\n            history: historicalData,\n            courseForecastArray: courseForecastArray,\n            dividendForecastArray: dividendForecastArray,\n        };\n        this.coursePredictors[etfIdentifier] = {\n            maxTimestampBeforeCoursePredictorRepetition: maxTimestampBeforeCoursePredictorRepetition,\n            predictors: {},\n        };\n        this.dividendPredictors[etfIdentifier] = {\n            maxYearBeforeDividendPredictorRepetition: maxYearBeforeDividendPredictorRepetition,\n            predictors: {},\n        };\n    }\n\n    /**\n     * Creates the course predictor for the etfIdentifier and the given timestamp if not already present.\n     *\n     * @param etfIdentifier The concerning etfIdentifier.\n     * @param timestamp The concerning timestamp.\n     * @returns\n     */\n    private _createCoursePredictorIfNotPresent(etfIdentifier: string, timestamp: number): void {\n        // Skip if already exists.\n        if (timestamp in this.coursePredictors[etfIdentifier]) {\n            return;\n        }\n        const forecastArray = this.historicalData[etfIdentifier].courseForecastArray;\n        const lastTimestampToIncludeInPrediction =\n            forecastArray[forecastArray.length - 1][timestampIndexOfForecastArray] -\n            Math.abs(forecastArray[forecastArray.length - 1][timestampIndexOfForecastArray] - timestamp) *\n                ForecastModelSingleton.backCastTimeFactor -\n            ForecastModelSingleton.backCastTimestampConstant;\n        const filteredForecastArray = forecastArray.filter(\n            entry => entry[timestampIndexOfForecastArray] >= lastTimestampToIncludeInPrediction\n        );\n        this.coursePredictors[etfIdentifier].predictors[timestamp] = regression.linear(filteredForecastArray, {\n            order: 2,\n            precision: 20,\n        });\n    }\n\n    /**\n     * Calculates the timestamp of the given date and the timestamp that should be used for the predictor.\n     * That means that the predictor timestamp is clamped to the timestamp where the predictor already uses all data points.\n     *\n     * @param date The concerning Date.\n     * @param etfIdentifier The concerning etfIdentifier.\n     * @returns The predictor timestamp and date timestamp.\n     */\n    private _courseDateToPredictorTimestampAndDateTimestamp(date: Date, etfIdentifier: string): [number, number] {\n        const timestamp = dateToTimestamp(date);\n        return [\n            timestamp > this.coursePredictors[etfIdentifier].maxTimestampBeforeCoursePredictorRepetition\n                ? this.coursePredictors[etfIdentifier].maxTimestampBeforeCoursePredictorRepetition\n                : timestamp,\n            timestamp,\n        ];\n    }\n\n    /**\n     * Creates the dividend predictor for the given etf and the year.\n     *\n     * @param etfIdentifier The concerning etfIdentifier.\n     * @param year The concerning year.\n     */\n    private _createDividendPredictorIfNotPresent(etfIdentifier: string, year: number): void {\n        // Skip if already exists.\n        if (year in this.dividendPredictors[etfIdentifier]) {\n            return;\n        }\n        const forecastArray = this.historicalData[etfIdentifier].dividendForecastArray;\n        const lastYearToIncludeInPrediction =\n            forecastArray[forecastArray.length - 1][timestampIndexOfForecastArray] -\n            Math.abs(forecastArray[forecastArray.length - 1][timestampIndexOfForecastArray] - year) *\n                ForecastModelSingleton.backCastTimeFactor -\n            ForecastModelSingleton.backCastTimestampConstant;\n        const filteredForecastArray = forecastArray.filter(\n            entry => entry[timestampIndexOfForecastArray] >= lastYearToIncludeInPrediction\n        );\n        this.dividendPredictors[etfIdentifier].predictors[year] = regression.linear(filteredForecastArray, {\n            order: 2,\n            precision: 20,\n        });\n    }\n\n    /**\n     * Clamps the given year to the year when all predictors would be the same\n     *  since all historic data of the given etf is already used.\n     *\n     * @param etfIdentifier The concerning etfIdentifier.\n     * @param year The concerning year.\n     * @returns The adjusted year.\n     */\n    private _dividendYearToPredictorYear(etfIdentifier: string, year: number): number {\n        return this.dividendPredictors[etfIdentifier].maxYearBeforeDividendPredictorRepetition < year\n            ? this.dividendPredictors[etfIdentifier].maxYearBeforeDividendPredictorRepetition\n            : year;\n    }\n\n    /**\n     * Predicts the course of the given ETF at the given date with the specified confidence.\n     *\n     * @param etfIdentifier The concerning etfIdentifier\n     * @param date The concerning date.\n     * @param confidence The confidence of the price development.\n     * @param startDate The startDate of the prediction.\n     * @returns The predicted course of the etf.\n     */\n    predictCourse(etfIdentifier: string, date: Date, confidence: number, startDate: Date) {\n        if (!(etfIdentifier in this.coursePredictors)) {\n            throw generateHistoricalDataNotPresentException(etfIdentifier);\n        }\n        const [predictorTimestamp, timestamp] = this._courseDateToPredictorTimestampAndDateTimestamp(\n            date,\n            etfIdentifier\n        );\n        const startingTimestamp = dateToTimestamp(startDate);\n        this._createCoursePredictorIfNotPresent(etfIdentifier, predictorTimestamp);\n        const eq = this.coursePredictors[etfIdentifier].predictors[predictorTimestamp].equation;\n        // Transforms the percentage [0,100] to the interval [1.75, 0.25].\n        const confidenceFactor = (1 - confidence - 0.5) * 2 * 0.75 + 1;\n        const startingPrice = eq[0] * startingTimestamp + eq[1];\n        const adjustedConfidencePrice = eq[0] * confidenceFactor * (timestamp - startingTimestamp) + startingPrice;\n        return adjustedConfidencePrice;\n    }\n\n    /**\n     * Predicts the dividend amount of the given ETF at the given year.\n     *\n     * @param etfIdentifier The concerning etfIdentifier.\n     * @param year The concerning year.\n     * @returns The predicted dividend amount of the etf.\n     */\n    predictDividend(etfIdentifier: string, year: number) {\n        if (!(etfIdentifier in this.dividendPredictors)) {\n            throw generateHistoricalDataNotPresentException(etfIdentifier);\n        }\n        const predictorYear = this._dividendYearToPredictorYear(etfIdentifier, year);\n        this._createDividendPredictorIfNotPresent(etfIdentifier, predictorYear);\n        return Math.max(\n            0,\n            this.dividendPredictors[etfIdentifier].predictors[predictorYear].predict(year)[courseIndexOfForecastArray]\n        );\n    }\n}\n","import { ForecastModelSingleton, ETFIdentifier } from './ForecastModel';\nimport { numberOfMonthsOfAYear, isLastMonthOfAYear, clamp, isFirstMonthOfAYear } from '../helpers/utils';\nimport cloneDeep from 'lodash.clonedeep';\n\nimport { ICostConfiguration, IConfigOptions } from '../components/Visualization';\n\ntype ETFShares = { [key in ETFIdentifier]: number };\n\nexport type ETFRatio = { [key in ETFIdentifier]?: number };\n\nexport type NegativeInvestmentStepIdentifier = 'totalCosts' | 'totalTaxes' | 'inflation';\n\nexport interface InvestmentStep {\n    date: Date;\n    newShares: ETFShares;\n    totalShares: ETFShares;\n    dividendNewShares: ETFShares;\n    dividendTotalShares: ETFShares;\n    distributingNewAmount: ETFShares;\n    distributingAmountUsableForPayout: ETFShares;\n    totalCosts: number;\n    sharePrices: ETFShares;\n    totalInvestedMoney: ETFShares;\n    newInvestedMoney: ETFShares;\n    newInvestment: number;\n    totalTaxes: number;\n    totalPayout: ETFShares;\n    newPayout: ETFShares;\n    inflation: number;\n}\n\ntype IPayoutStats = { [key in ETFIdentifier]: IPayoutStat };\n\ninterface IPayoutStat {\n    investmentStepsIdx: number;\n    alreadySoldShares: number;\n}\n\nconst basicRateOfInterest = 0.007;\nconst partialExemption = 0.7;\nconst corporateTaxRatio = 0.26375;\nconst inflationRate = 0.01;\nconst defaultDividendAmount = 0.025;\n\n/**\n * Calculates the currency value of all shares of the etf for the given investment step.\n *\n * @param etfIdentifier The concerning etfIdentifier.\n * @param investmentStep The concerning InvestmentStep.\n * @returns The currency value of the total shares of the specified etf.\n */\nexport function getTotalShareValue(etfIdentifier: ETFIdentifier, investmentStep: InvestmentStep): number {\n    return investmentStep.totalShares[etfIdentifier] * investmentStep.sharePrices[etfIdentifier];\n}\n\n/**\n * Calculates the currency value of all shares generated by dividends of the etf for the given investment step.\n *\n * @param etfIdentifier The concerning etfIdentifier.\n * @param investmentStep The concerning InvestmentStep.\n * @returns The currency value of the total shares generated by dividends. of the specified etf.\n */\nexport function getTotalDividendShareValue(etfIdentifier: ETFIdentifier, investmentStep: InvestmentStep): number {\n    return investmentStep.dividendTotalShares[etfIdentifier] * investmentStep.sharePrices[etfIdentifier];\n}\n\n/**\n * Calculates the currency value of new shares of the etf for the given investment step.\n *\n * @param etfIdentifier The concerning etfIdentifier.\n * @param investmentStep The concerning InvestmentStep.\n * @returns The currency value of the new shares of the specified etf.\n */\nfunction getNewShareValue(etfIdentifier: ETFIdentifier, investmentStep: InvestmentStep): number {\n    return investmentStep.newShares[etfIdentifier] * investmentStep.sharePrices[etfIdentifier];\n}\n\n/**\n * Calculates the sum of all payout over all used ETFs.\n *\n * @param investmentStep The concerning investmentStep.\n * @returns The sum of all payouts.\n */\nexport function getSumNewPayout(investmentStep: InvestmentStep) {\n    let sumNewPayout = 0;\n    for (const etfIdentifier of Object.keys(investmentStep.newPayout) as ETFIdentifier[]) {\n        sumNewPayout += investmentStep.newPayout[etfIdentifier];\n    }\n    return sumNewPayout;\n}\n\n/**\n * Creates a new date which is the given date + 1 month.\n *\n * @param date The concerning date.\n * @returns The given date increased by one month.\n */\nfunction getNextMonthDate(date: Date): Date {\n    const newDate = new Date(date);\n    newDate.setMonth(date.getMonth() + 1);\n    return newDate;\n}\n\n/**\n * Predicts the dividend for the etf at the given date.\n * If the date is not the last month of a year, zero is returned. Indicating that no divided payout has been done.\n * If the dividend prediction is 0 since all historic data is 0, then the defaultDividendAmount is used.\n *\n * @param etfIdentifier The concerning etfIdentifier.\n * @param date The concerning date.\n * @returns The predicted dividend for the given etf and date.\n */\nfunction calculateDividend(etfIdentifier: string, date: Date, confidence: number, initialDate: Date): number {\n    if (!isLastMonthOfAYear(date)) {\n        return 0;\n    } else {\n        const dividendAmount = ForecastModelSingleton.getInstance().predictDividend(etfIdentifier, date.getFullYear());\n        const sharePrice = ForecastModelSingleton.getInstance().predictCourse(\n            etfIdentifier,\n            date,\n            confidence,\n            initialDate\n        );\n        return dividendAmount > 0 ? dividendAmount : defaultDividendAmount * sharePrice;\n    }\n}\n\n/**\n * Calculates the cost for the given money amount regarding the cost configuration.\n *\n * @param amount The amount of money to which the costs need to be applied.\n * @param costConfiguration The cost configuration consisting of fixed and percentage costs.\n * @returns The amount minus the costs and the costs itself.\n */\nfunction calculateCosts(amount: number, costConfiguration: ICostConfiguration): [number, number] {\n    let costs = amount * costConfiguration.percentageCosts + costConfiguration.fixedCosts;\n    const amountWithoutCosts = Math.max(amount - costs, 0);\n    costs = amount - amountWithoutCosts;\n    return [amountWithoutCosts, costs];\n}\n\n/**\n * Subtracts the tax free amount from the tax amount and\n * returns the resulting leftover taxes and tax free amount.\n *\n * @param taxAmount The amount of taxes that need to be paid.\n * @param taxFreeAmount The tax free amount that is left and can be used.\n * @returns The leftover taxes and tax free amount.\n */\nfunction subtractTaxFreeGain(taxAmount: number, taxFreeAmount: number): [number, number] {\n    const leftoverTaxes = Math.max(0, taxAmount - taxFreeAmount);\n    const leftoverTaxFreeAmount = Math.max(0, taxFreeAmount - taxAmount);\n    return [leftoverTaxes, leftoverTaxFreeAmount];\n}\n\n/**\n * Calculates the sum of all etf share values of the portfolio.\n * I.e. returns the current value of the whole portfolio.\n *\n * @param investmentStep The concerning InvestmentStep.\n * @returns The sum of all total etf values.\n */\nexport function sumOfTotalValues(investmentStep: InvestmentStep): number {\n    let sum = 0;\n    for (const etfIdentifier of Object.keys(investmentStep.totalShares) as ETFIdentifier[]) {\n        sum += getTotalShareValue(etfIdentifier, investmentStep);\n    }\n    return sum;\n}\n\n/**\n * Calculates and adds the amount of effective money loss caused by inflation\n * between the initialDate and the date of the investment step.\n *\n * @param investmentStep The concerning investmentStep.\n * @param initialDate The initial date of the whole investment model.\n */\nfunction calculateAndAddInflation(investmentStep: InvestmentStep, initialDate: Date): void {\n    const sumTotalValues = sumOfTotalValues(investmentStep);\n    const date = investmentStep.date;\n    const timeFactor =\n        date.getFullYear() -\n        initialDate.getFullYear() +\n        (date.getMonth() - initialDate.getMonth()) / numberOfMonthsOfAYear;\n    investmentStep.inflation = sumTotalValues - sumTotalValues * Math.pow(1 - inflationRate, timeFactor);\n}\n\n/**\n * Calculates the amount increase in a accumulative fashion for every passed year.\n *\n * @param amount The initial amount.\n * @param percentageIncrease The percentage increase of the amount per year.\n * @param numberOfMonths The number of months passed since the investment model start.\n * @returns The amount increased by the percentage for every passed year in an accumulative way.\n */\nfunction calculateAmountIncrease(amount: number, percentageIncrease: number, numberOfMonths: number): number {\n    const yearsSinceStart = Math.floor(numberOfMonths / numberOfMonthsOfAYear);\n    return amount * Math.pow(1 + percentageIncrease, yearsSinceStart);\n}\n\n/**\n * Calculates the forecast interval of the model and all necessary dates.\n * Divides the interval in saving and payout phase. Adds the fade out years\n * to the life expectation to indicate that death is expected in that phase.\n *\n * @param age The age of the person.\n * @param lifeExpectation The life expectation of the person.\n * @param savingPhaseLength The saving phase length of the person.\n * @param fadeOutYears The length of the fade out years.\n * @returns The three dates indicating the start of the saving phase, the start of the payout phase and the end of the payout phase.\n */\nfunction calculateForecastInterval(\n    age: number,\n    lifeExpectation: number,\n    savingPhaseLength: number,\n    fadeOutYears: number = 10\n): [Date, Date, Date] {\n    const yearsLeft = lifeExpectation - age;\n    const now = new Date();\n    const beginningDate = new Date(now.getFullYear(), now.getMonth() + 1);\n    // start next month.\n    const endSavingPhaseDate = new Date(beginningDate);\n    endSavingPhaseDate.setFullYear(beginningDate.getFullYear() + savingPhaseLength);\n    const endDate = new Date(beginningDate);\n    endDate.setFullYear(beginningDate.getFullYear() + yearsLeft + fadeOutYears);\n    return [beginningDate, endSavingPhaseDate, endDate];\n}\n\n/**\n * Calculates the Vorabpauschale for the last year. Thus is zero if the month is not January.\n *\n * @param investmentSteps All investmentSteps already calculated for the model.\n * @param date The date of the concerning investment step.\n * @param leftoverTaxFreeAmount The leftover tax free amount.\n * @param etfToRatio The etfIdentifier mapping to the ratio.\n * @returns The amount of taxes to pay and the leftover tax free amount.\n */\nfunction calculateVorabpauschaleTaxes(\n    investmentSteps: InvestmentStep[],\n    date: Date,\n    leftoverTaxFreeAmount: number,\n    etfToRatio: ETFRatio\n): [number, number] {\n    // TODO: tax amount auf das new investment draufrechnen.\n    if (!isFirstMonthOfAYear(date) || investmentSteps.length < 2) {\n        return [0, leftoverTaxFreeAmount];\n    }\n    let summedTaxes = 0;\n    const decemberInvestmentStep = investmentSteps[investmentSteps.length - 1];\n    // Use the second investment step if there are not enough meaning the investing started this year after january.\n    // The second is the true first investment step the first is a dummy.\n    const firstInvestmentStepOfThisYear =\n        investmentSteps.length - numberOfMonthsOfAYear > 1\n            ? investmentSteps[investmentSteps.length - numberOfMonthsOfAYear]\n            : investmentSteps[1];\n    for (const etfIdentifier of Object.keys(etfToRatio) as ETFIdentifier[]) {\n        const distributionsOfETF = decemberInvestmentStep.distributingNewAmount[etfIdentifier];\n        // Sum up total Investment of the first date of this year.\n        let accumulatedBasicProfit =\n            (getTotalShareValue(etfIdentifier, firstInvestmentStepOfThisYear) *\n                (numberOfMonthsOfAYear - firstInvestmentStepOfThisYear.date.getMonth())) /\n            numberOfMonthsOfAYear;\n        // Sum up all new investments from february to december.\n        for (let i = 1; i < numberOfMonthsOfAYear && investmentSteps.length - i > 0; i++) {\n            const currentInvestmentStep = investmentSteps[investmentSteps.length - i];\n            accumulatedBasicProfit +=\n                (getNewShareValue(etfIdentifier, currentInvestmentStep) * i) / numberOfMonthsOfAYear;\n        }\n        accumulatedBasicProfit *= 0.7 * basicRateOfInterest;\n        // If there were more distributions than the base profit, no vorabpauschale needs to be paid.\n        if (distributionsOfETF >= accumulatedBasicProfit) {\n            continue;\n        }\n        const currentShareValues = getTotalShareValue(etfIdentifier, decemberInvestmentStep);\n        // Calculate profit of last year.\n        const profitOverAllTime = currentShareValues - decemberInvestmentStep.totalInvestedMoney[etfIdentifier];\n        let profitOfPreviousYears = 0;\n        if (investmentSteps.length > numberOfMonthsOfAYear) {\n            profitOfPreviousYears = Math.max(\n                0,\n                getTotalShareValue(etfIdentifier, investmentSteps[investmentSteps.length - 1 - numberOfMonthsOfAYear]) -\n                    investmentSteps[investmentSteps.length - 1 - numberOfMonthsOfAYear].totalInvestedMoney[\n                        etfIdentifier\n                    ]\n            );\n        }\n\n        const profitOfThisYear = profitOverAllTime - profitOfPreviousYears;\n        let amountToApplyTaxes = clamp(profitOfThisYear, 0, accumulatedBasicProfit);\n        [amountToApplyTaxes, leftoverTaxFreeAmount] = subtractTaxFreeGain(amountToApplyTaxes, leftoverTaxFreeAmount);\n        summedTaxes += amountToApplyTaxes * partialExemption * corporateTaxRatio;\n    }\n    return [summedTaxes, leftoverTaxFreeAmount];\n}\n\n/**\n * Adds an accumulating month to the investment model.\n *\n * @param investmentSteps The whole investment model.\n * @param investment The amount of money to invest this month.\n * @param date The date of the new investment step.\n * @param initialDate The initial date of the investment model.\n * @param etfToRatio The etfIdentifier mapping to the ratio.\n * @param leftoverTaxFreeAmount The leftover tax free amount of this year. Is automatically reset in January.\n * @param useDistributingModel Determines the Model used for the calculation. Distributing vs. Accumulating.\n * @param configOptions The configuration options containing the tax free amount and cost configuration.\n */\nfunction addSavingPhaseMonth(\n    investmentSteps: InvestmentStep[],\n    investment: number,\n    date: Date,\n    initialDate: Date,\n    etfToRatio: ETFRatio,\n    configOptions: IConfigOptions,\n    leftoverTaxFreeAmount: number,\n    useDistributingModel: boolean\n): number {\n    // Reset tax free amount every beginning year.\n    if (isFirstMonthOfAYear(date)) {\n        leftoverTaxFreeAmount = configOptions.taxFreeAmount;\n    }\n    let costs = 0;\n    const prevInvestmentStep = investmentSteps[investmentSteps.length - 1];\n    const newInvestmentStep = cloneDeep(prevInvestmentStep);\n    newInvestmentStep.date = date;\n    newInvestmentStep.newInvestment = 0;\n\n    for (const etfIdentifier of Object.keys(etfToRatio) as ETFIdentifier[]) {\n        // Handle investment amount and costs.\n        const investmentOfEtfWithCosts = (etfToRatio[etfIdentifier] as number) * investment;\n        newInvestmentStep.newInvestment += investmentOfEtfWithCosts;\n        const [investmentOfEtfWithoutCosts, newCosts] = calculateCosts(\n            investmentOfEtfWithCosts,\n            configOptions.costConfig\n        );\n        costs += newCosts;\n        newInvestmentStep.newInvestedMoney[etfIdentifier] = investmentOfEtfWithoutCosts;\n        newInvestmentStep.totalInvestedMoney[etfIdentifier] += investmentOfEtfWithoutCosts;\n\n        // Handle new shares and price.\n        const etfSharePrice = ForecastModelSingleton.getInstance().predictCourse(\n            etfIdentifier,\n            date,\n            configOptions.confidence,\n            initialDate\n        );\n        const newShares = investmentOfEtfWithoutCosts / etfSharePrice;\n        newInvestmentStep.sharePrices[etfIdentifier] = etfSharePrice;\n        newInvestmentStep.newShares[etfIdentifier] = newShares;\n\n        // Handle dividend.\n        const dividendPayoutMoneyPerShare = calculateDividend(\n            etfIdentifier,\n            date,\n            configOptions.confidence,\n            initialDate\n        );\n        let dividendPayoutMoney = newInvestmentStep.totalShares[etfIdentifier] * dividendPayoutMoneyPerShare;\n\n        if (useDistributingModel) {\n            newInvestmentStep.distributingNewAmount[etfIdentifier] = dividendPayoutMoney;\n            let dividendPayoutMoneyBrutto = dividendPayoutMoney;\n            let leftoverDividendPayoutMoneyBrutto;\n            [leftoverDividendPayoutMoneyBrutto, leftoverTaxFreeAmount] = subtractTaxFreeGain(\n                dividendPayoutMoneyBrutto,\n                leftoverTaxFreeAmount\n            );\n            let taxesToPay = leftoverDividendPayoutMoneyBrutto * partialExemption * corporateTaxRatio;\n            newInvestmentStep.totalTaxes += taxesToPay;\n            dividendPayoutMoney = dividendPayoutMoneyBrutto - taxesToPay;\n        }\n        const newSharesByDividend = dividendPayoutMoney / etfSharePrice;\n        newInvestmentStep.newShares[etfIdentifier] += newSharesByDividend;\n        if (!useDistributingModel) {\n            newInvestmentStep.dividendNewShares[etfIdentifier] = newSharesByDividend;\n            newInvestmentStep.dividendTotalShares[etfIdentifier] += newSharesByDividend;\n        }\n\n        // Adjust other values.\n        newInvestmentStep.totalShares[etfIdentifier] += newInvestmentStep.newShares[etfIdentifier];\n        newInvestmentStep.newPayout[etfIdentifier] = 0;\n    }\n\n    // Handle costs, taxes and inflation.\n    newInvestmentStep.totalCosts += costs;\n    const [newTaxes] = calculateVorabpauschaleTaxes(investmentSteps, date, configOptions.taxFreeAmount, etfToRatio);\n    newInvestmentStep.totalTaxes += newTaxes;\n    calculateAndAddInflation(newInvestmentStep, initialDate);\n    investmentSteps.push(newInvestmentStep);\n    return leftoverTaxFreeAmount;\n}\n\n/**\n * Adds a payout month step to the investment model.\n *\n * @param investmentSteps The whole investment model.\n * @param sellingAmount The money amount of shares to sell this month.\n * @param etfToRatio The etfIdentifier mapping to the ratio.\n * @param date The date of the new payout step.\n * @param initialDate The initial date of the investment model.\n * @param configOptions The configuration options containing the tax free amount and cost configuration.\n * @param leftoverAlreadyPaidTaxes The leftover amount of taxes that have already been paid.\n * @param leftoverTaxFreeAmount The leftover tax free amount.\n * @param payoutStats The payout stats containing which investment step is next and what shares are left according to the FIFO principle.\n * @param useDistributingModel Determines the Model used for the calculation. Distributing vs. Accumulating.\n * @returns The updated leftoverAlreadyPaidTaxes and leftoverTaxFreeAmount.\n */\nfunction addPayoutMonth(\n    investmentSteps: InvestmentStep[],\n    sellingAmount: number,\n    etfToRatio: ETFRatio,\n    date: Date,\n    initialDate: Date,\n    configOptions: IConfigOptions,\n    leftoverAlreadyPaidTaxes: number,\n    leftoverTaxFreeAmount: number,\n    payoutStats: IPayoutStats,\n    useDistributingModel: boolean\n) {\n    if (isFirstMonthOfAYear(date)) {\n        leftoverTaxFreeAmount = configOptions.taxFreeAmount;\n    }\n    let costs = 0;\n    let taxes = 0;\n    const prevInvestmentStep = investmentSteps[investmentSteps.length - 1];\n    const newInvestmentStep = cloneDeep(prevInvestmentStep);\n    newInvestmentStep.date = date;\n    newInvestmentStep.newInvestment = 0;\n\n    for (const etfIdentifier of Object.keys(etfToRatio) as ETFIdentifier[]) {\n        const etfSharePrice = ForecastModelSingleton.getInstance().predictCourse(\n            etfIdentifier,\n            date,\n            configOptions.confidence,\n            initialDate\n        );\n        let amountToSell = (etfToRatio[etfIdentifier] as number) * sellingAmount;\n        // Set default values.\n        newInvestmentStep.sharePrices[etfIdentifier] = etfSharePrice;\n        newInvestmentStep.newPayout[etfIdentifier] = 0;\n        newInvestmentStep.newInvestedMoney[etfIdentifier] = 0;\n        // Handle dividend.\n        const dividendPayoutMoneyPerShare = calculateDividend(\n            etfIdentifier,\n            date,\n            configOptions.confidence,\n            initialDate\n        );\n        const dividendPayoutMoney = newInvestmentStep.totalShares[etfIdentifier] * dividendPayoutMoneyPerShare;\n\n        // Apply taxes if using distributing model.\n        if (useDistributingModel) {\n            newInvestmentStep.distributingNewAmount[etfIdentifier] = dividendPayoutMoney;\n            let dividendPayoutMoneyBrutto = dividendPayoutMoney;\n            let leftoverDividendPayoutMoneyBrutto;\n            [leftoverDividendPayoutMoneyBrutto, leftoverTaxFreeAmount] = subtractTaxFreeGain(\n                dividendPayoutMoneyBrutto,\n                leftoverTaxFreeAmount\n            );\n            let taxesToPay = leftoverDividendPayoutMoneyBrutto * partialExemption * corporateTaxRatio;\n            [taxesToPay, leftoverAlreadyPaidTaxes] = subtractTaxFreeGain(taxesToPay, leftoverAlreadyPaidTaxes);\n            newInvestmentStep.totalTaxes += taxesToPay;\n            const dividendPayout = dividendPayoutMoneyBrutto - taxesToPay;\n            newInvestmentStep.distributingAmountUsableForPayout[etfIdentifier] = dividendPayout;\n            newInvestmentStep.newShares[etfIdentifier] = 0;\n        } else {\n            const newSharesByDividend = dividendPayoutMoney / etfSharePrice;\n            newInvestmentStep.newShares[etfIdentifier] = newSharesByDividend;\n            newInvestmentStep.totalShares[etfIdentifier] += newSharesByDividend;\n            newInvestmentStep.dividendNewShares[etfIdentifier] = newSharesByDividend;\n            newInvestmentStep.dividendTotalShares[etfIdentifier] += newSharesByDividend;\n        }\n\n        const amountUsedByDistribution = Math.min(\n            amountToSell,\n            newInvestmentStep.distributingAmountUsableForPayout[etfIdentifier]\n        );\n        amountToSell -= amountUsedByDistribution;\n        newInvestmentStep.distributingAmountUsableForPayout[etfIdentifier] -= amountUsedByDistribution;\n        newInvestmentStep.newPayout[etfIdentifier] += amountUsedByDistribution;\n\n        let amountAlreadySold = 0;\n        // Skip payout if there are no shares left to sell or the payout is covered by the dividend.\n        if (payoutStats[etfIdentifier].investmentStepsIdx < investmentSteps.length && amountToSell > 0) {\n            // Prepare amount and costs.\n            const costsToPay = calculateCosts(amountToSell, configOptions.costConfig)[1];\n            let alreadyPaidCosts = 0;\n            let payoutInvestmentStepIdxForFIFO = payoutStats[etfIdentifier].investmentStepsIdx;\n            let currentSharesLeft =\n                investmentSteps[payoutInvestmentStepIdxForFIFO].newShares[etfIdentifier] -\n                payoutStats[etfIdentifier].alreadySoldShares;\n            // Iterate over all investment steps according to the FIFO principle and sell as much shares as needed.\n            for (; payoutInvestmentStepIdxForFIFO < investmentSteps.length; payoutInvestmentStepIdxForFIFO++) {\n                const currentInvestmentStepForFIFO = investmentSteps[payoutInvestmentStepIdxForFIFO];\n                const leftoverAmountToSell = amountToSell - amountAlreadySold;\n\n                // Calculate the amount of shares to sell and the leftover shares.\n                const currentValueOfShares =\n                    etfSharePrice *\n                    (payoutInvestmentStepIdxForFIFO === payoutStats[etfIdentifier].investmentStepsIdx\n                        ? currentInvestmentStepForFIFO.newShares[etfIdentifier] -\n                          payoutStats[etfIdentifier].alreadySoldShares\n                        : currentInvestmentStepForFIFO.newShares[etfIdentifier]);\n                const amountToSellWithCosts = Math.min(currentValueOfShares, leftoverAmountToSell);\n                const amountOfSharesToSell = amountToSellWithCosts / etfSharePrice;\n                currentSharesLeft = currentInvestmentStepForFIFO.newShares[etfIdentifier] - amountOfSharesToSell;\n                currentSharesLeft -=\n                    payoutInvestmentStepIdxForFIFO === payoutStats[etfIdentifier].investmentStepsIdx\n                        ? payoutStats[etfIdentifier].alreadySoldShares\n                        : 0;\n\n                // Apply costs to the sold shares.\n                const amountToSellWithoutCosts = Math.max(0, amountToSellWithCosts - (costsToPay - alreadyPaidCosts));\n                alreadyPaidCosts += Math.max(0, amountToSellWithCosts - amountToSellWithoutCosts);\n\n                // Calculate amount on which taxes need to be paid.\n                const initialValueOfShares =\n                    amountOfSharesToSell * currentInvestmentStepForFIFO.sharePrices[etfIdentifier];\n                let amountToPayTaxes = Math.max(0, amountToSellWithoutCosts - initialValueOfShares);\n\n                // Apply taxes.\n                [amountToPayTaxes, leftoverTaxFreeAmount] = subtractTaxFreeGain(\n                    amountToPayTaxes,\n                    leftoverTaxFreeAmount\n                );\n                let taxesToPay = amountToPayTaxes * partialExemption * corporateTaxRatio;\n                [taxesToPay, leftoverAlreadyPaidTaxes] = subtractTaxFreeGain(taxesToPay, leftoverAlreadyPaidTaxes);\n                taxes += taxesToPay;\n                const payoutAmount = amountToSellWithoutCosts - taxesToPay;\n\n                // Set resulting values.\n                newInvestmentStep.newPayout[etfIdentifier] += payoutAmount;\n                newInvestmentStep.totalPayout[etfIdentifier] += payoutAmount;\n\n                newInvestmentStep.totalShares[etfIdentifier] -= amountOfSharesToSell;\n                amountAlreadySold += amountToSellWithCosts;\n\n                // Handle the decrease of the dividendShares.\n                let amountOfDividendSharesLeft = 0;\n                if (payoutInvestmentStepIdxForFIFO === payoutStats[etfIdentifier].investmentStepsIdx) {\n                    amountOfDividendSharesLeft = Math.max(\n                        0,\n                        currentInvestmentStepForFIFO.dividendNewShares[etfIdentifier] -\n                            payoutStats[etfIdentifier].alreadySoldShares\n                    );\n                } else {\n                    amountOfDividendSharesLeft = currentInvestmentStepForFIFO.dividendNewShares[etfIdentifier];\n                }\n                const amountOfDividendSharesSold = Math.min(amountOfDividendSharesLeft, amountOfSharesToSell);\n                newInvestmentStep.dividendTotalShares[etfIdentifier] -= amountOfDividendSharesSold;\n\n                // Use break in order to not change the value of payoutInvestmentStepIdxForFIFO.\n                if (amountAlreadySold >= amountToSell) {\n                    break;\n                }\n            }\n            // Handle update payoutStats.\n            costs += alreadyPaidCosts;\n            payoutStats[etfIdentifier].investmentStepsIdx = payoutInvestmentStepIdxForFIFO;\n\n            payoutStats[etfIdentifier].alreadySoldShares =\n                payoutInvestmentStepIdxForFIFO < investmentSteps.length\n                    ? investmentSteps[payoutInvestmentStepIdxForFIFO].newShares[etfIdentifier] - currentSharesLeft\n                    : 0;\n        }\n        // Handle Vorabpauschale.\n        const [newTaxes, newLeftoverTaxFreeAmount] = calculateVorabpauschaleTaxes(\n            investmentSteps,\n            date,\n            leftoverTaxFreeAmount,\n            etfToRatio\n        );\n        leftoverTaxFreeAmount = newLeftoverTaxFreeAmount;\n        taxes += newTaxes;\n        leftoverAlreadyPaidTaxes += newTaxes;\n    }\n\n    // Set resulting values and inflation.\n    newInvestmentStep.totalCosts += costs;\n    newInvestmentStep.totalTaxes += taxes;\n    calculateAndAddInflation(newInvestmentStep, initialDate);\n    investmentSteps.push(newInvestmentStep);\n    return [leftoverAlreadyPaidTaxes, leftoverTaxFreeAmount];\n}\n\n/**\n * Creates a dummy investment step intended to be the first investment step in the model\n * in order to avoid if statements in the other investment methods checking whether this is the first step or not.\n *\n * @param etfToRatio The etfIdentifier mapping to the ratio.\n * @param date The starting date of the investment model.\n * @returns A dummy investment step.\n */\nfunction generateEmptyInvestmentStep(etfToRatio: ETFRatio, date: Date, configOptions: IConfigOptions): InvestmentStep {\n    const dummyData: ETFShares = { 'SP5C.PAR': 0, ESGE: 0, SUSA: 0 };\n    const emptyInvestmentStep: InvestmentStep = {\n        date: date,\n        totalCosts: 0,\n        totalTaxes: 0,\n        newShares: { ...dummyData },\n        totalShares: { ...dummyData },\n        dividendNewShares: { ...dummyData },\n        dividendTotalShares: { ...dummyData },\n        distributingNewAmount: { ...dummyData },\n        distributingAmountUsableForPayout: { ...dummyData },\n        totalInvestedMoney: { ...dummyData },\n        totalPayout: { ...dummyData },\n        newPayout: { ...dummyData },\n        sharePrices: { ...dummyData },\n        newInvestedMoney: { ...dummyData },\n        newInvestment: 0,\n        inflation: 0,\n    };\n    for (const etfIdentifier of Object.keys(etfToRatio) as ETFIdentifier[]) {\n        emptyInvestmentStep.newShares[etfIdentifier] = 0;\n        emptyInvestmentStep.totalShares[etfIdentifier] = 0;\n        emptyInvestmentStep.dividendNewShares[etfIdentifier] = 0;\n        emptyInvestmentStep.dividendTotalShares[etfIdentifier] = 0;\n        emptyInvestmentStep.totalInvestedMoney[etfIdentifier] = 0;\n        emptyInvestmentStep.totalPayout[etfIdentifier] = 0;\n        emptyInvestmentStep.newPayout[etfIdentifier] = 0;\n        emptyInvestmentStep.newInvestedMoney[etfIdentifier] = 0;\n        emptyInvestmentStep.sharePrices[etfIdentifier] = ForecastModelSingleton.getInstance().predictCourse(\n            etfIdentifier,\n            date,\n            configOptions.confidence,\n            date\n        );\n    }\n    return emptyInvestmentStep;\n}\n\n/**\n * Creates the investment model for the visualization which consists of arrays of an object\n * which contain all important values for the visualization.\n * It can deliver the model with different levels of detail meaning that one step covers more than one month.\n *\n * Example code:\n * ```typescript\n * const investmentModel = new InvestmentModel(...uiParams);\n * // 2 => every investment step will cover 6 Months.\n * const dataVorTheVisualization = investmentModel.getInvestmentSteps(2);\n * ```\n */\nexport class InvestmentModel {\n    private startCapital: number;\n    private monthlyInvestment: number;\n    private yearlyInvestmentIncrease: number;\n    private monthlyPayout: number;\n    private yearlyPayoutIncrease: number;\n    private savingPhaseLength: number;\n    private etfToRatio: ETFRatio;\n    private configOptions: IConfigOptions;\n    private expectationOfLife: number;\n    private age: number;\n    private useDistributingModel: boolean;\n\n    private savingDates: Date[] = [];\n    private payoutDates: Date[] = [];\n    private initialDate: Date = new Date();\n    private investmentSteps: InvestmentStep[] = [];\n\n    /**\n     * Constructs and calculates the investment model.\n     *\n     * @param startCapital The starting capital.\n     * @param monthlyInvestment The monthly investment.\n     * @param yearlyInvestmentIncrease The yearly investment increase given as a percentage in float representation.\n     * @param monthlyPayout The monthly payout.\n     * @param yearlyPayoutIncrease The yearly payout increase given as a percentage in float representation.\n     * @param savingPhaseLength The length of the saving phase.\n     * @param etfToRatio The etfIdentifier mapping to the ratio.\n     * @param configOptions The config options containing the tax free amount and cost configuration.\n     * @param age The current age of the person.\n     * @param expectationOfLife The life expectation of the person.\n     * @param useDistributingModel Indicate which model should be used.\n     */\n    constructor(\n        startCapital: number,\n        monthlyInvestment: number,\n        yearlyInvestmentIncrease: number,\n        monthlyPayout: number,\n        yearlyPayoutIncrease: number,\n        savingPhaseLength: number,\n        etfToRatio: ETFRatio,\n        configOptions: IConfigOptions,\n        age: number,\n        expectationOfLife: number,\n        useDistributingModel: boolean\n    ) {\n        this.startCapital = startCapital;\n        this.monthlyInvestment = monthlyInvestment;\n        this.monthlyPayout = monthlyPayout;\n        this.savingPhaseLength = savingPhaseLength;\n        this.etfToRatio = etfToRatio;\n        this.configOptions = configOptions;\n        this.expectationOfLife = expectationOfLife;\n        this.age = age;\n        this.yearlyInvestmentIncrease = yearlyInvestmentIncrease;\n        this.yearlyPayoutIncrease = yearlyPayoutIncrease;\n        this.useDistributingModel = useDistributingModel;\n\n        this._calculateDatesForModel();\n        this._calculateModel();\n    }\n\n    /**\n     * Calculates all necessary dates for the saving and payout phase.\n     */\n    private _calculateDatesForModel() {\n        const [startDate, endSavingPhaseDate, endDate] = calculateForecastInterval(\n            this.age,\n            this.expectationOfLife,\n            this.savingPhaseLength\n        );\n        const savingDates = [];\n        for (\n            let currentDate = startDate;\n            currentDate < endSavingPhaseDate;\n            currentDate = getNextMonthDate(currentDate)\n        ) {\n            savingDates.push(currentDate);\n        }\n        this.savingDates = savingDates;\n        const payoutDates = [];\n        for (let currentDate = endSavingPhaseDate; currentDate < endDate; currentDate = getNextMonthDate(currentDate)) {\n            payoutDates.push(currentDate);\n        }\n        this.payoutDates = payoutDates;\n        this.initialDate = startDate;\n    }\n\n    /**\n     * Calculates the investment model by first adding all investment and the payout dates.\n     */\n    private _calculateModel() {\n        let investmentSteps = [generateEmptyInvestmentStep(this.etfToRatio, this.savingDates[0], this.configOptions)];\n        let leftoverTaxFreeAmount = addSavingPhaseMonth(\n            investmentSteps,\n            this.monthlyInvestment + this.startCapital,\n            this.savingDates[0],\n            this.initialDate,\n            this.etfToRatio,\n            this.configOptions,\n            this.configOptions.taxFreeAmount,\n            this.useDistributingModel\n        );\n        for (let i = 1; i < this.savingDates.length; i++) {\n            const investmentAmount = calculateAmountIncrease(this.monthlyInvestment, this.yearlyInvestmentIncrease, i);\n            addSavingPhaseMonth(\n                investmentSteps,\n                investmentAmount,\n                this.savingDates[i],\n                this.initialDate,\n                this.etfToRatio,\n                this.configOptions,\n                leftoverTaxFreeAmount,\n                this.useDistributingModel\n            );\n        }\n        // Discard the empty investment step.\n        investmentSteps = investmentSteps.slice(1);\n\n        let leftoverAlreadyPaidTaxes = this.useDistributingModel\n            ? 0\n            : investmentSteps[investmentSteps.length - 1].totalTaxes;\n        const payoutStats: IPayoutStats = {\n            'SP5C.PAR': { investmentStepsIdx: 0, alreadySoldShares: 0 },\n            ESGE: { investmentStepsIdx: 0, alreadySoldShares: 0 },\n            SUSA: { investmentStepsIdx: 0, alreadySoldShares: 0 },\n        };\n        for (let i = 0; i < this.payoutDates.length; i++) {\n            const payoutAmount = calculateAmountIncrease(this.monthlyPayout, this.yearlyPayoutIncrease, i);\n            [leftoverAlreadyPaidTaxes, leftoverTaxFreeAmount] = addPayoutMonth(\n                investmentSteps,\n                payoutAmount,\n                this.etfToRatio,\n                this.payoutDates[i],\n                this.initialDate,\n                this.configOptions,\n                leftoverAlreadyPaidTaxes,\n                leftoverTaxFreeAmount,\n                payoutStats,\n                this.useDistributingModel\n            );\n        }\n        this.investmentSteps = investmentSteps;\n    }\n\n    /**\n     * Returns the investment model with the given level of detail.\n     *\n     * numberOfEntriesPerYear = 1 will result in one investment Step per year and\n     * numberOfEntriesPerYear = 12 will change nothing on the model.\n     *\n     * NOTE: Only the newInvestment and newPayout values are adjusted when investment steps need to be merged\n     * since the current visualizations need no further adjustments.\n     *\n     * @param numberOfEntriesPerYear The number of investment steps per year.\n     * @returns\n     */\n    getInvestmentSteps(numberOfEntriesPerYear: number) {\n        if (!Number.isInteger(numberOfMonthsOfAYear / numberOfEntriesPerYear)) {\n            throw new Error(\n                `The numberOfEntriesPerYear need to be dividable by ${numberOfMonthsOfAYear} in order to make sense.`\n            );\n        }\n\n        if (numberOfEntriesPerYear === numberOfMonthsOfAYear) {\n            return this.investmentSteps;\n        }\n        const selectedInvestmentSteps = [];\n        const numberOfMonthsToMerge = numberOfMonthsOfAYear / numberOfEntriesPerYear;\n        for (let i = 0; i < this.investmentSteps.length; i += numberOfMonthsToMerge) {\n            // Take the start date of the period as the representation.\n            const adjustedInvestmentStep = cloneDeep(this.investmentSteps[i]);\n            for (let offset = 1; offset < numberOfMonthsToMerge; offset++) {\n                adjustedInvestmentStep.newInvestment += this.investmentSteps[i + offset].newInvestment;\n                for (const etfIdentifier of Object.keys(\n                    this.investmentSteps[i + offset].newPayout\n                ) as ETFIdentifier[]) {\n                    adjustedInvestmentStep.newPayout[etfIdentifier] +=\n                        this.investmentSteps[i + offset].newPayout[etfIdentifier];\n                }\n            }\n            selectedInvestmentSteps.push(adjustedInvestmentStep);\n        }\n        return selectedInvestmentSteps;\n    }\n\n    /**\n     * Returns the first payout date of the model.\n     * @returns The first payoutDate.\n     */\n    getPayoutPhaseBeginDate() {\n        return this.payoutDates[0];\n    }\n}\n","import * as d3 from 'd3';\nimport { roundDateToBeginningOfMonth, numberOfMonthsOfAYear } from '../helpers/utils';\nimport { InvestmentStep } from '../model/InvestmentModel';\n\nexport interface DataArrayEntry {\n    yStart: number;\n    yEnd: number;\n    date: Date;\n    color: string;\n}\n\nexport type DataArray = DataArrayEntry[][];\n\ninterface ITextProperty {\n    text: string;\n    x: number;\n    y: number;\n    fontSize: number;\n    fontFamily: string | null;\n    textAnchor: string;\n    fontWeight: string;\n    color: string;\n}\n\ninterface IOptionalTextProperty {\n    text: string;\n    x: number;\n    y: number;\n    fontSize?: number;\n    fontFamily?: string | null;\n    textAnchor?: string;\n    fontWeight?: string;\n    color: string;\n}\n\ninterface ITextProperties {\n    [textIdentifier: string]: ITextProperty;\n}\n\nconst FIVE_MILLION = 5000000;\nconst ONE_THOUSAND = 1000;\nconst ONE_MILLION = 1000000;\nconst numberOfTicks = 6;\n\n/**\n * Returns a formatted text to fit the text. If the value is undefined '-' is used.\n *\n * @param name The label.\n * @param value The value of the data referenced by the label.\n * @returns The formatted text.\n */\nexport function generateLabel(name: string): string {\n    name = name.charAt(0).toUpperCase() + name.slice(1);\n    // Regex from: https://stackoverflow.com/a/58861672\n    name = name.replace(/(?!^)([A-Z]|\\d+)/g, ' $1');\n    return `${name}:`;\n}\n\n/**\n * Calculates the element index which contains the given date.\n *\n * @param date The concerning date.\n * @param investmentSteps The investment steps where the date position should be calculated.\n * @returns The index of the date in the investment steps.\n */\nfunction calculateInvestmentStepIndexForDate(date: Date, investmentSteps: InvestmentStep[]): number {\n    const firstDate = investmentSteps[0].date;\n    const secondDate = investmentSteps[1].date;\n    const numberOfMonthsSinceStartDate =\n        (date.getFullYear() - firstDate.getFullYear()) * numberOfMonthsOfAYear +\n        (date.getMonth() - firstDate.getMonth());\n    const numberOfMonthsPerInvestmentStep =\n        (secondDate.getFullYear() - firstDate.getFullYear()) * numberOfMonthsOfAYear +\n        (secondDate.getMonth() - firstDate.getMonth());\n\n    return Math.floor(numberOfMonthsSinceStartDate / numberOfMonthsPerInvestmentStep);\n}\n\n/**\n * A rendering base class for d3 visualizations implementing the strategy design pattern.\n * Provides the rendering and interaction strategy and provides common behavior such as axis rendering.\n *\n * No update of the data is implemented.\n * In order to adjust the visualization to a new investment model, a complete re rendering is required.\n *\n * Keeps track of all active diagrams. Thus needs to be reset in the case of a redrawing of the graphs.\n *\n * It ensures that all active diagrams are synced regarding the tooltip and x axis.\n */\nexport abstract class D3ChartStrategy {\n    public tooltipDate: Date;\n    public yExtent: [number, number];\n    public textProperties: ITextProperties = {};\n\n    protected readonly lineStrokeWidth = 3;\n    protected readonly contentOpacity: number = 0.65;\n\n    protected readonly valueTextOffset = 200;\n    protected readonly standardFontSize = 18;\n    protected readonly labelValueIdentifier = 'value';\n    protected readonly deltaIdentifier = 'delta';\n    protected readonly monospaceFont = 'monospace';\n    protected readonly standardFont = null;\n    protected readonly startTextAnchor = 'start';\n    protected readonly endTextAnchor = 'end';\n    protected readonly boldText = 'bold';\n    protected readonly normalText = 'normal';\n    protected readonly totalColor = '#b59554';\n    protected readonly totalIdentifier = 'total';\n\n    protected investmentSteps: InvestmentStep[];\n    protected dateExtent: [Date, Date] = [new Date(), new Date()];\n    protected marginW: number;\n    protected marginH: number;\n    protected width: number;\n    protected height: number;\n    protected maxIndex = 0;\n    protected minIndex = 0;\n    protected xTextOffset;\n    protected yScale: d3.ScaleLinear<number, number, never> = d3.scaleLinear();\n    protected xScale: d3.ScaleTime<number, number, never> = d3.scaleTime();\n    protected dataArray: DataArray = [];\n    protected payoutPhaseStartDate: Date;\n\n    protected svg: d3.Selection<SVGGElement, unknown, null, undefined>;\n\n    private static activeStrategies: D3ChartStrategy[] = [];\n\n    private readonly fadeOutGradientID = 'fadeOutGradient';\n    private readonly fadeOutYearsLength = 10;\n    private readonly gridOpacity = 0.2;\n    private readonly gridColor = 'grey';\n    private readonly gridStrokeWidth = 2;\n\n    private labelDivisionFactor = 1;\n    private numberIndicator = 'K';\n    private hoverLine: d3.Selection<SVGLineElement, unknown, null, undefined>;\n    private interaction: d3.Selection<SVGGElement, unknown, null, undefined>;\n    private textGroup: d3.Selection<SVGGElement, unknown, null, undefined>;\n    private xAxis: d3.Axis<d3.NumberValue | Date>;\n    private yAxis: d3.Axis<d3.NumberValue | Date>;\n\n    /**\n     * Constructs the strategy and registers the object.\n     *\n     * @param investmentSteps The investment model.\n     * @param renderDivRef The reference to the div to which the diagram should be rendered.\n     * @param payoutPhaseStartDate The start date of the payout phase.\n     * @param svgID The ID of the svg.\n     * @param tooltipDate The tooltip date. Undefined if no tooltip was visible in the last diagram.\n     * @param yExtent The yExtent. Undefined if it should be recalculated.\n     * @param width The diagram width.\n     * @param height The diagram height.\n     * @param marginW The diagram margin width.\n     * @param marginH The diagram margin height.\n     */\n    constructor(\n        investmentSteps: InvestmentStep[],\n        renderDivRef: HTMLDivElement,\n        payoutPhaseStartDate: Date,\n        svgID: string,\n        tooltipDate: Date | undefined,\n        yExtent: [number, number] | undefined,\n        captionSpace = 0,\n        width = 1100,\n        height = 300,\n        marginW = 250,\n        marginH = 40\n    ) {\n        if (this.constructor === D3ChartStrategy) {\n            throw new Error(\"Abstract classes can't be instantiated.\");\n        }\n        D3ChartStrategy.activeStrategies.push(this);\n        this.investmentSteps = investmentSteps;\n        this.payoutPhaseStartDate = payoutPhaseStartDate;\n        this.tooltipDate = tooltipDate != null ? tooltipDate : new Date(0);\n        this.yExtent = yExtent != null ? yExtent : [0, 0];\n\n        this.marginW = marginW;\n        this.marginH = marginH;\n        this.width = width;\n        this.height = height;\n        this.xTextOffset = this.width * 1.02;\n\n        // Reset diagram by deletion.\n        renderDivRef.innerHTML = '';\n\n        this.svg = d3\n            .select(renderDivRef)\n            .append('svg')\n            .attr('class', 'img-fluid')\n            .attr('id', svgID)\n            .attr('viewBox', `0 0 ${this.width + 2 * this.marginW} ${this.height + 2 * this.marginH + captionSpace}`)\n            .append('g')\n            .attr('transform', `translate(${[this.marginW / 2, this.marginH]})`);\n\n        // Set default values needed by typescript.\n        this.textGroup = this.svg;\n        this.interaction = this.svg;\n        this.hoverLine = this.svg.append('line');\n        this.yAxis = d3.axisLeft(this.yScale);\n        this.xAxis = d3.axisBottom(this.xScale);\n    }\n\n    /**\n     * Resets the static state that keeps track of every active diagram.\n     * Needs to be called before re rendering the diagrams.\n     */\n    static reset(): void {\n        D3ChartStrategy.activeStrategies = [];\n    }\n\n    /**\n     * Sets the visibility option for all active diagram tooltips.\n     *\n     * @param displayOption The visibility option to apply to all active diagram tooltips.\n     */\n    private static _setInteractionVisibilityForActiveDiagrams(displayOption: 'hidden' | 'visible'): void {\n        for (const activeDiagram of D3ChartStrategy.activeStrategies) {\n            activeDiagram.interaction.style('visibility', displayOption);\n        }\n    }\n\n    /**\n     * The rendering strategy which defined the order in which the diagram is rendered.\n     * Thus defined which part lies on top of the other. e.g. Text is rendered over the central content.\n     */\n    public render(): void {\n        this._prepareData();\n        this._calculateExtents();\n        this._createScales();\n        this._createAxis();\n        this._drawGrid();\n        this._drawContent();\n        this._drawFadeOut();\n        this._prepareText();\n        this._drawText();\n        this._drawAxis();\n        this._addInteraction();\n\n        if (this.tooltipDate >= this.dateExtent[0] && this.tooltipDate <= this.dateExtent[1]) {\n            this._updateAllDiagrams();\n        }\n    }\n\n    /**\n     * Transforms the value to the number that would be used to display it.\n     * Is used by valueToDisplayText().\n     *\n     * @param value The value to display.\n     * @param hasToBePositive Optional parameter which can bes et to ensure the value is positive by ignoring the sign.\n     * @returns The resulting text.\n     */\n    protected valueToDisplayNumber(value: number, hasToBePositive = false): number {\n        if (hasToBePositive && value != null) {\n            value = Math.abs(value);\n        }\n        return value / this.labelDivisionFactor;\n    }\n\n    /**\n     * Generates a human readable display text from the value. Returns '-' as a placeholder when value is undefined.\n     *\n     * @param value The value to display.\n     * @param hasToBePositive Optional parameter which can bes et to ensure the value is positive by ignoring the sign.\n     * @param skipDecimalPlaces Optional parameter which can be used to force skipping the decimal places.\n     * @returns The resulting text.\n     */\n    protected valueToDisplayText(\n        value: number | undefined,\n        hasToBePositive = false,\n        skipDecimalPlaces = false\n    ): string {\n        const decimalPlaces = skipDecimalPlaces ? 0 : 2;\n        return `${\n            value != null\n                ? this.valueToDisplayNumber(value, hasToBePositive).toLocaleString(undefined, {\n                      maximumFractionDigits: decimalPlaces,\n                      minimumFractionDigits: decimalPlaces,\n                  })\n                : ' - '\n        }${this.numberIndicator} €`;\n    }\n\n    /**\n     * Adds the text property to the object variable textProperties. Makes some options optional.\n     * Should be used when adding a text property since it reduces the code repetition by having some default values.\n     *\n     * @param identifier The identifier of the text property.\n     * @param property The text properties where some properties are optional.\n     */\n    protected addTextProperty(identifier: string, property: IOptionalTextProperty) {\n        this.textProperties[identifier] = {\n            text: property.text,\n            x: property.x,\n            y: property.y,\n            fontSize: property.fontSize ? property.fontSize : this.standardFontSize,\n            fontFamily: property.fontFamily ? property.fontFamily : this.standardFont,\n            textAnchor: property.textAnchor ? property.textAnchor : this.startTextAnchor,\n            fontWeight: property.fontWeight ? property.fontWeight : this.boldText,\n            color: property.color,\n        };\n    }\n\n    /**\n     * calculates the data and thus the axis extent for the time (x-Axis) and money (y-Axis).\n     * The calculation of the y extent is skipped if it has already been set to a valid extent.\n     * Thus if the extent has been set in the constructor the y extent is preserved.\n     */\n    private _calculateExtents() {\n        this.dateExtent = d3.extent(this.dataArray[0], d => d.date) as [Date, Date];\n\n        const lastImportantDateForYScale = new Date(this.payoutPhaseStartDate);\n        lastImportantDateForYScale.setMonth(lastImportantDateForYScale.getMonth() + numberOfMonthsOfAYear);\n        // Only calculate the y extent when it is undefined. Meaning the y axis is not locked.\n        if (this.yExtent[0] === 0 && this.yExtent[1] === 0) {\n            const filteredDataArrayForYMax = this.dataArray[this.maxIndex].filter(\n                e => e.date <= lastImportantDateForYScale && e.date > this.dateExtent[0]\n            );\n            const filteredDataArrayForYMin = this.dataArray[this.minIndex].filter(\n                e => e.date <= lastImportantDateForYScale\n            );\n            const maxVal = d3.max(filteredDataArrayForYMax.map(e => e.yStart)) as number;\n            const minVal = d3.min(filteredDataArrayForYMin.map(e => e.yEnd)) as number;\n            this.yExtent = [minVal, maxVal];\n        }\n        // Set label constants.\n        this.labelDivisionFactor =\n            Math.max(-this.yExtent[0], this.yExtent[1] as number) >= FIVE_MILLION ? ONE_MILLION : ONE_THOUSAND;\n        this.numberIndicator = this.labelDivisionFactor === ONE_MILLION ? 'M' : 'K';\n    }\n\n    /**\n     * Creates the d3 scales for both axis.\n     */\n    private _createScales() {\n        this.yScale = d3.scaleLinear().domain(this.yExtent).range([this.height, 0]);\n        this.xScale = d3.scaleTime().domain(this.dateExtent).range([0, this.width]);\n    }\n\n    /**\n     * Creates the axis but does not draw it.\n     */\n    private _createAxis() {\n        // Only skip decimal Places if all axis numbers are integers.\n        const skipDecimalPlaces = this.yScale\n            .ticks(numberOfTicks)\n            .every(tick => Number.isInteger(this.valueToDisplayNumber(tick, false)));\n        this.yAxis = d3\n            .axisLeft(this.yScale)\n            .tickFormat(d => this.valueToDisplayText(d as number, false, skipDecimalPlaces))\n            .ticks(numberOfTicks);\n\n        this.xAxis = d3.axisBottom(this.xScale);\n    }\n\n    /**\n     * Draws the grid in the background which is aligned to the ticks of the axes.\n     */\n    private _drawGrid() {\n        const gridGroup = this.svg.append('g').attr('class', 'grid');\n        const yGridGroup = gridGroup.append('g').attr('class', 'yGrid');\n        const xGridGroup = gridGroup.append('g').attr('class', 'xGrid');\n\n        yGridGroup\n            .selectAll('line')\n            .data(this.yScale.ticks(numberOfTicks))\n            .enter()\n            .append('line')\n            .attr('x1', this.xScale(this.dateExtent[0]))\n            .attr('y1', d => this.yScale(d))\n            .attr('x2', this.xScale(this.dateExtent[1]))\n            .attr('y2', d => this.yScale(d))\n            .style('stroke-width', this.gridStrokeWidth)\n            .style('stroke', this.gridColor)\n            .style('opacity', this.gridOpacity);\n\n        xGridGroup\n            .selectAll('line')\n            .data(this.xScale.ticks())\n            .enter()\n            .append('line')\n            .attr('x1', d => this.xScale(d))\n            .attr('y1', this.yScale(this.yExtent[0]))\n            .attr('x2', d => this.xScale(d))\n            .attr('y2', this.yScale(this.yExtent[1]))\n            .style('stroke-width', this.gridStrokeWidth)\n            .style('stroke', this.gridColor)\n            .style('opacity', this.gridOpacity);\n    }\n\n    /**\n     * Draws both scales, the zero line and the line that separates the saving and payout phase.\n     */\n    private _drawAxis() {\n        this.svg.append('g').style('font-size', '20px').call(this.yAxis);\n\n        this.svg\n            .append('g')\n            .style('font-size', '20px')\n            .attr('transform', `translate(0, ${this.height})`)\n            .call(this.xAxis);\n\n        // Draw zero line.\n        this.svg\n            .append('g')\n            .append('line')\n            .attr('x1', this.xScale(this.dateExtent[0]))\n            .attr('y1', this.yScale(0))\n            .attr('x2', this.xScale(this.dateExtent[1]))\n            .attr('y2', this.yScale(0))\n            .style('stroke-width', this.lineStrokeWidth)\n            .style('stroke', 'black');\n\n        // Draw phase division line.\n        this.svg\n            .append('g')\n            .append('line')\n            .attr('x1', this.xScale(this.payoutPhaseStartDate) - this.lineStrokeWidth / 2)\n            .attr('y1', this.yScale(this.yExtent[0]))\n            .attr('x2', this.xScale(this.payoutPhaseStartDate) - this.lineStrokeWidth / 2)\n            .attr('y2', this.yScale(this.yExtent[1]))\n            .style('stroke-width', this.lineStrokeWidth)\n            .style('stroke', 'black');\n    }\n\n    /**\n     * Adds all necessary things for the interaction to the diagram.\n     *\n     * The interaction design is inspired by: http://www.d3noob.org/2014/07/my-favourite-tooltip-method-for-line.html\n     */\n    private _addInteraction() {\n        const interactionClass = 'interaction';\n        const tooltipLineClass = 'tooltipLine';\n\n        this.interaction = this.svg\n            .append('g')\n            .attr('class', interactionClass)\n            .style('visibility', 'hidden')\n            .attr('transform', `translate(${[0, -this.marginH]})`);\n\n        this.hoverLine = this.interaction\n            .append('line')\n            .attr('class', tooltipLineClass)\n            .style('stroke', 'blue')\n            .style('stroke-dasharray', '3,3')\n            .style('stroke-width', this.lineStrokeWidth)\n            .style('opacity', 0.5)\n            .attr('y1', this.height + 2 * this.marginH)\n            .attr('y2', 0);\n\n        // Add rectangle to catch mouse events.\n        this.svg\n            .append('rect')\n            .attr('class', 'mouseEvent')\n            .attr('transform', `translate(${[0, -this.marginH]})`)\n            .attr('height', this.height + 2 * this.marginH)\n            .attr('width', this.width)\n            .attr('fill', 'none')\n            .style('pointer-events', 'all')\n            .on('mouseover', () => D3ChartStrategy._setInteractionVisibilityForActiveDiagrams('visible'))\n            .on('mousemove', mouseEvent => this._handleTooltipEvent(mouseEvent));\n    }\n\n    /**\n     * Handles the tooltip event and updates all diagrams accordingly.\n     *\n     * @param mouseEvent The mouse event.\n     */\n    private _handleTooltipEvent(mouseEvent: MouseEvent) {\n        const x = d3.pointer(mouseEvent)[0];\n        const date = this.xScale.invert(x);\n        this.tooltipDate = roundDateToBeginningOfMonth(date);\n        this._updateAllDiagrams();\n    }\n\n    /**\n     * Updates all tooltips of all diagrams.\n     */\n    private _updateAllDiagrams() {\n        const investmentStepIndex = calculateInvestmentStepIndexForDate(this.tooltipDate, this.investmentSteps);\n        D3ChartStrategy._setInteractionVisibilityForActiveDiagrams('visible');\n        for (const activeDiagram of D3ChartStrategy.activeStrategies) {\n            activeDiagram.hoverLine.attr('x1', this.xScale(this.tooltipDate)).attr('x2', this.xScale(this.tooltipDate));\n            activeDiagram._updateTooltip(investmentStepIndex);\n            activeDiagram._updateDiagram();\n        }\n    }\n\n    /**\n     * Draws all text that is stored in the textProperties.\n     */\n    private _drawText() {\n        this.textGroup = this.svg.append('g').attr('class', 'textGroup');\n        this.textGroup\n            .selectAll('text')\n            .data(Object.values(this.textProperties))\n            .enter()\n            .append('text')\n            .text(d => d.text)\n            .attr('x', d => d.x)\n            .attr('y', d => d.y)\n            .style('font-size', d => d.fontSize)\n            .style('font-family', d => d.fontFamily)\n            .style('font-weight', d => d.fontWeight)\n            .style('text-anchor', d => d.textAnchor)\n            .style('fill', d => d.color);\n    }\n\n    /**\n     * Updates a single diagram. The update currently only consists of the text update.\n     */\n    private _updateDiagram() {\n        this.textGroup.selectAll('text').text(d => (d as ITextProperty).text);\n    }\n\n    /**\n     * Prepares all text which should be displayed and stores them in the textProperties variable.\n     *  Default text is included. Thus a super call is expected.\n     */\n    protected _prepareText() {\n        const savingPhaseMid =\n            this.xScale(this.dateExtent[0]) +\n            (this.xScale(this.payoutPhaseStartDate) - this.xScale(this.dateExtent[0])) / 2;\n\n        const payoutPhaseMid =\n            this.xScale(this.payoutPhaseStartDate) +\n            (this.xScale(this.dateExtent[1]) - this.xScale(this.payoutPhaseStartDate)) / 2;\n        const yPos = -10;\n        this.addTextProperty('savingBold', {\n            x: savingPhaseMid,\n            y: yPos,\n            text: 'SAVING',\n            textAnchor: this.endTextAnchor,\n            color: 'black',\n            fontSize: this.standardFontSize * 1.5,\n        });\n        this.addTextProperty('savingPhase', {\n            x: savingPhaseMid,\n            y: yPos,\n            text: 'Phase',\n            textAnchor: this.startTextAnchor,\n            fontWeight: this.normalText,\n            color: 'black',\n            fontSize: this.standardFontSize * 1.5,\n        });\n        this.addTextProperty('payoutBold', {\n            x: payoutPhaseMid,\n            y: yPos,\n            text: 'PAYOUT',\n            textAnchor: this.endTextAnchor,\n            color: 'black',\n            fontSize: this.standardFontSize * 1.5,\n        });\n        this.addTextProperty('payoutPhase', {\n            x: payoutPhaseMid,\n            y: yPos,\n            text: 'Phase',\n            textAnchor: this.startTextAnchor,\n            fontWeight: this.normalText,\n            color: 'black',\n            fontSize: this.standardFontSize * 1.5,\n        });\n    }\n\n    /**\n     * Draws the opacity of the fade out years by using a svg linear gradient applied to a rectangle.\n     */\n    private _drawFadeOut() {\n        const fadeOutGroup = this.svg.append('g').attr('class', 'fadeOut');\n        const fadeOutStartDate = new Date(this.dateExtent[1]);\n        fadeOutStartDate.setFullYear(fadeOutStartDate.getFullYear() - this.fadeOutYearsLength);\n\n        const gradient = fadeOutGroup.append('linearGradient').attr('id', this.fadeOutGradientID);\n\n        gradient\n            .append('stop')\n            .attr('class', 'gradientStart')\n            .attr('offset', '0%')\n            .attr('stop-color', 'white')\n            .attr('stop-opacity', 0);\n\n        gradient\n            .append('stop')\n            .attr('class', 'gradientEnd')\n            .attr('offset', '100%')\n            .attr('stop-color', 'white')\n            .attr('stop-opacity', 1);\n\n        fadeOutGroup\n            .append('rect')\n            .attr('x', this.xScale(fadeOutStartDate))\n            .attr('y', -this.marginH)\n            .attr('width', this.xScale(this.dateExtent[1]) - this.xScale(fadeOutStartDate) + 1)\n            .attr('height', this.yScale(this.yExtent[0]) - this.yScale(this.yExtent[1]) + this.marginH * 2)\n            .style('fill', `url(#${this.fadeOutGradientID})`);\n    }\n\n    /**\n     * Prepares the data needed for the rendering.\n     */\n    protected abstract _prepareData(): void;\n\n    /**\n     * Draws the main content of the diagram.\n     */\n    protected abstract _drawContent(): void;\n\n    /**\n     * Updates the textProperties according to the investment step the tooltip is currently on.\n     *\n     * @param investmentStepIndex The index of the investment step of at the current mouse position.\n     */\n    protected abstract _updateTooltip(investmentStepIndex: number): void;\n}\n","import { InvestmentStep, getSumNewPayout } from '../model/InvestmentModel';\nimport { D3ChartStrategy, generateLabel } from './D3ChartStrategy';\n\nexport const payoutIdentifier = 'payout';\nexport const investedIdentifier = 'invested';\nexport const cashflowChartColors = {\n    payout: { first: '#3acc5c', second: '#2d9e45' },\n    invested: { first: '#ff3e58', second: '#c32f46' },\n};\n\n/**\n * Renders a cashflow diagram of the investment model.\n */\nexport class CashflowBarChart extends D3ChartStrategy {\n    private readonly barPaddingPercentage = 0.9;\n\n    private rectWidth = 0;\n\n    /**\n     * Just calls the constructor of the base class with the specific svg id.\n     *\n     * @param investmentSteps The investment model.\n     * @param renderDivRef The div reference where the diagram should be placed.\n     * @param payoutPhaseStartDate The start of the payout phase.\n     * @param tooltipDate The tooltip date if the tooltip was active in the last rendered diagram.\n     * @param yExtent The y extent if it should stay static.\n     */\n    constructor(\n        investmentSteps: InvestmentStep[],\n        renderDivRef: HTMLDivElement,\n        payoutPhaseStartDate: Date,\n        tooltipDate: Date | undefined,\n        yExtent: [number, number] | undefined\n    ) {\n        super(investmentSteps, renderDivRef, payoutPhaseStartDate, 'secondSVG', tooltipDate, yExtent);\n    }\n\n    /**\n     * Prepares the data for the diagram based on the investment model.\n     */\n    protected _prepareData() {\n        // Create line array.\n        const dataToIndex = {\n            invested: 0,\n            payout: 1,\n        };\n\n        this.minIndex = dataToIndex.invested;\n        this.maxIndex = dataToIndex.payout;\n\n        this.dataArray = [[], []];\n        const startYear = this.investmentSteps[0].date.getFullYear();\n        for (const investmentStep of this.investmentSteps) {\n            let sumNewPayout = getSumNewPayout(investmentStep);\n            const colorIdentifier = (investmentStep.date.getFullYear() - startYear) % 2 === 0 ? 'first' : 'second';\n\n            this.dataArray[dataToIndex.invested].push({\n                yStart: 0,\n                yEnd: -investmentStep.newInvestment,\n                date: investmentStep.date,\n                color: cashflowChartColors.invested[colorIdentifier],\n            });\n            this.dataArray[dataToIndex.payout].push({\n                yStart: sumNewPayout,\n                yEnd: 0,\n                date: investmentStep.date,\n                color: cashflowChartColors.payout[colorIdentifier],\n            });\n        }\n\n        this.rectWidth = (this.width / this.dataArray[dataToIndex.invested].length) * this.barPaddingPercentage;\n    }\n\n    /**\n     * Prepares additional Text that should be displayed by adding it to the textProperties.\n     */\n    protected _prepareText() {\n        super._prepareText();\n\n        this.textProperties[payoutIdentifier] = {\n            text: generateLabel(payoutIdentifier),\n            x: this.xTextOffset,\n            y: this.height * 0.25 - this.standardFontSize * 0.5,\n            fontSize: this.standardFontSize,\n            fontFamily: this.standardFont,\n            textAnchor: this.startTextAnchor,\n            fontWeight: this.boldText,\n            color: cashflowChartColors[payoutIdentifier].second,\n        };\n\n        this.textProperties[payoutIdentifier + this.labelValueIdentifier] = {\n            text: this.valueToDisplayText(undefined),\n            x: this.xTextOffset + this.valueTextOffset,\n            y: this.height * 0.25 - this.standardFontSize * 0.5,\n            fontSize: this.standardFontSize,\n            fontFamily: this.monospaceFont,\n            textAnchor: this.endTextAnchor,\n            fontWeight: this.boldText,\n            color: cashflowChartColors[payoutIdentifier].second,\n        };\n\n        this.textProperties[investedIdentifier] = {\n            text: generateLabel(investedIdentifier),\n            x: this.xTextOffset,\n            y: this.height * 0.75 - this.standardFontSize * 0.5,\n            fontSize: this.standardFontSize,\n            fontFamily: this.standardFont,\n            textAnchor: this.startTextAnchor,\n            fontWeight: this.boldText,\n            color: cashflowChartColors[investedIdentifier].second,\n        };\n        this.textProperties[investedIdentifier + this.labelValueIdentifier] = {\n            text: this.valueToDisplayText(undefined),\n            x: this.xTextOffset + this.valueTextOffset,\n            y: this.height * 0.75 - this.standardFontSize * 0.5,\n            fontSize: this.standardFontSize,\n            fontFamily: this.monospaceFont,\n            textAnchor: this.endTextAnchor,\n            fontWeight: this.boldText,\n            color: cashflowChartColors[investedIdentifier].second,\n        };\n    }\n\n    /**\n     * Updates the textProperties according to the investment step the tooltip is currently on.\n     *\n     * @param investmentStepIndex The index of the investment step of at the current mouse position.\n     */\n    protected _updateTooltip(investmentStepIndex: number) {\n        const payoutValue = getSumNewPayout(this.investmentSteps[investmentStepIndex]);\n        const investedValue = this.investmentSteps[investmentStepIndex].newInvestment;\n        this.textProperties[payoutIdentifier + this.labelValueIdentifier].text = this.valueToDisplayText(payoutValue);\n\n        this.textProperties[investedIdentifier + this.labelValueIdentifier].text = this.valueToDisplayText(\n            investedValue\n        );\n    }\n\n    /**\n     * Draws the main content of the diagram. In this case the bars of the cashflow barchart.\n     */\n    protected _drawContent() {\n        // Skip the last bar if it is outside the graph.\n        const needToSkipLastBar = this.dataArray[0][this.dataArray[0].length - 1].date === this.dateExtent[1];\n        for (let barArray of this.dataArray) {\n            if (needToSkipLastBar) {\n                barArray = barArray.slice(0, -1);\n            }\n\n            this.svg\n                .append('g')\n                .attr('class', 'bars')\n                .selectAll(`rect.none`)\n                .data(barArray)\n                .enter()\n                .append('rect')\n                .style('fill', d => d.color)\n                .attr('x', d => this.xScale(d.date))\n                .attr('width', this.rectWidth)\n                .attr('y', d => this.yScale(d.yStart))\n                .attr('height', d => this.yScale(d.yEnd) - this.yScale(d.yStart))\n                .style('opacity', this.contentOpacity);\n        }\n    }\n}\n","import * as d3 from 'd3';\nimport {\n    getTotalShareValue,\n    getTotalDividendShareValue,\n    getSumNewPayout,\n    InvestmentStep,\n    NegativeInvestmentStepIdentifier,\n    ETFRatio,\n} from '../model/InvestmentModel';\nimport { ETFIdentifier } from '../model/ForecastModel';\nimport { D3ChartStrategy, generateLabel, DataArrayEntry } from './D3ChartStrategy';\nimport { cashflowChartColors, payoutIdentifier, investedIdentifier } from './CashflowBarChartD3';\nimport { ETF_SYMBOL_TO_NAME } from '../components/App';\n\nexport interface IDataToIndex {\n    [identifier: string]: number;\n}\n\ntype ETFIdentifierToColors = { [key in ETFIdentifier]: { total: string; invested: string } };\n\ntype NegativeInvestmentToColorMap = { [key in NegativeInvestmentStepIdentifier]: string };\n\nexport const captionSpaceForDeltaValues = 180;\n\n/**\n * A class that draws an area chart that contains the value of costs, taxes,\n * inflation and the total value and invested value of all used ETFs.\n */\nexport class AreaChartD3 extends D3ChartStrategy {\n    // Color schema taken from: https://colorbrewer2.org/#type=qualitative&scheme=Paired&n=11 and slightly adjusted.\n    private readonly etfLineColors: ETFIdentifierToColors = {\n        'SP5C.PAR': { total: '#1f78b4', invested: '#a6cee3' },\n        ESGE: { total: '#33a02c', invested: '#b2df8a' },\n        SUSA: { total: '#ff7f00', invested: '#fdbf6f' },\n    };\n    private totalValueIndex = -1;\n\n    private readonly negativeColors: NegativeInvestmentToColorMap = {\n        inflation: '#f7528e',\n        totalCosts: '#6a3d9a',\n        totalTaxes: '#e31a1c',\n    };\n    private readonly negativeLabels: NegativeInvestmentStepIdentifier[] = ['totalCosts', 'totalTaxes', 'inflation'];\n    private readonly investedIdentifier = 'invested';\n    private readonly capitalIdentifier = 'capital';\n\n    private etfIdentifiers: ETFIdentifier[];\n    private previousInvestmentSteps: InvestmentStep[] | undefined;\n    protected dataToIndex: IDataToIndex = {};\n    protected subtractInflationFromTotal: boolean;\n\n    /**\n     * Constructs the area chart by calling the base class constructor and determining all used ETFs.\n     */\n    constructor(\n        investmentSteps: InvestmentStep[],\n        renderDivRef: HTMLDivElement,\n        payoutPhaseStartDate: Date,\n        tooltipDate: Date | undefined,\n        yExtent: [number, number] | undefined,\n        etfRatio: ETFRatio,\n        subtractInflationFromTotal: boolean,\n        previousInvestmentSteps: InvestmentStep[] | undefined\n    ) {\n        super(\n            investmentSteps,\n            renderDivRef,\n            payoutPhaseStartDate,\n            'firstSVG',\n            tooltipDate,\n            yExtent,\n            captionSpaceForDeltaValues\n        );\n        this.previousInvestmentSteps = previousInvestmentSteps;\n        this.subtractInflationFromTotal = subtractInflationFromTotal;\n\n        this.etfIdentifiers = [];\n        for (const etfIdentifier of Object.keys(etfRatio) as ETFIdentifier[]) {\n            const ratio = etfRatio[etfIdentifier];\n            if (ratio != null && ratio > 0.0) {\n                this.etfIdentifiers.push(etfIdentifier);\n            }\n        }\n    }\n\n    /**\n     * Prepares all data from the investment model for rendering.\n     */\n    protected _prepareData() {\n        this.dataToIndex = {\n            totalCosts: 0,\n            totalTaxes: 1,\n            inflation: 2,\n        };\n\n        let currentIdx = 3;\n        for (const etfIdentifier of this.etfIdentifiers) {\n            this.dataToIndex[etfIdentifier + this.investedIdentifier] = currentIdx++;\n            this.dataToIndex[etfIdentifier + this.capitalIdentifier] = currentIdx++;\n        }\n\n        this.minIndex = this.dataToIndex.inflation;\n        this.maxIndex = currentIdx - 1;\n        this.totalValueIndex = this.maxIndex;\n\n        this.dataArray = [];\n        for (let i = 0; i < currentIdx; i++) {\n            this.dataArray.push([]);\n        }\n        for (const investmentStep of this.investmentSteps) {\n            this.dataArray[this.dataToIndex.totalCosts].push({\n                yStart: 0,\n                yEnd: -investmentStep.totalCosts,\n                date: investmentStep.date,\n                color: this.negativeColors.totalCosts,\n            });\n            this.dataArray[this.dataToIndex.totalTaxes].push({\n                yStart: -investmentStep.totalCosts,\n                yEnd: -investmentStep.totalCosts - investmentStep.totalTaxes,\n                date: investmentStep.date,\n                color: this.negativeColors.totalTaxes,\n            });\n            this.dataArray[this.dataToIndex.inflation].push({\n                yStart: -investmentStep.totalCosts - investmentStep.totalTaxes,\n                yEnd: -investmentStep.totalCosts - investmentStep.totalTaxes - investmentStep.inflation,\n                date: investmentStep.date,\n                color: this.negativeColors.inflation,\n            });\n            let heightOffset = 0;\n            for (const etfIdentifier of this.etfIdentifiers) {\n                const totalShareValue = getTotalShareValue(etfIdentifier, investmentStep);\n                const totalDividendShareValue = getTotalDividendShareValue(etfIdentifier, investmentStep);\n                this.dataArray[this.dataToIndex[etfIdentifier + this.capitalIdentifier]].push({\n                    yStart: totalShareValue + heightOffset,\n                    yEnd: totalShareValue - totalDividendShareValue + heightOffset,\n                    date: investmentStep.date,\n                    color: this.etfLineColors[etfIdentifier].total,\n                });\n                this.dataArray[this.dataToIndex[etfIdentifier + this.investedIdentifier]].push({\n                    yStart: totalShareValue - totalDividendShareValue + heightOffset,\n                    yEnd: heightOffset,\n                    date: investmentStep.date,\n                    color: this.etfLineColors[etfIdentifier].invested,\n                });\n                heightOffset += totalShareValue;\n            }\n        }\n    }\n\n    /**\n     * Draws all the lines of the chart. I.e. the total value line.\n     */\n    protected _drawLines() {\n        // Draw total line.\n        this.svg\n            .append('path')\n            .datum(this.dataArray[this.totalValueIndex])\n            .style('stroke', this.totalColor)\n            .style('stroke-width', this.lineStrokeWidth)\n            .style('fill', 'none')\n            .attr(\n                'd',\n                d3\n                    .line<DataArrayEntry>()\n                    .x(d => this.xScale(d.date))\n                    .y((d, i) => {\n                        return this.yScale(\n                            d.yStart - (this.subtractInflationFromTotal ? this.investmentSteps[i].inflation : 0)\n                        );\n                    })\n            );\n    }\n\n    /**\n     * Draws the main content of the diagram. Currently a stacked area chart.\n     */\n    protected _drawContent() {\n        this._drawArea();\n        this._drawLines();\n    }\n\n    /**\n     * Draws the stacked areas of the diagram.\n     */\n    protected _drawArea() {\n        // Draw stacked area chart.\n        for (let i = 0; i < this.dataArray.length; i++) {\n            this.svg\n                .append('g')\n                .attr('class', 'area')\n                .append('path')\n                .datum(this.dataArray[i])\n                .style('opacity', this.contentOpacity)\n                .style('fill', d => d[0].color)\n                .attr(\n                    'd',\n                    d3\n                        .area<DataArrayEntry>()\n                        .curve(d3.curveMonotoneX)\n                        .x(d => this.xScale(d.date))\n                        .y0(d => this.yScale(d.yEnd))\n                        .y1(d => this.yScale(d.yStart))\n                );\n        }\n    }\n\n    /**\n     * Prepares the additional text that is displayed by adding it to the textProperties.\n     */\n    protected _prepareText() {\n        super._prepareText();\n        const paddingH = this.standardFontSize * 0.4;\n\n        this.addNegativeLabels(paddingH);\n        this.addETFLabels(paddingH);\n        this.addTotalLabel();\n\n        const yOffset = this.height * 1.1;\n        const xPadding = this.width / this.negativeLabels.length;\n        // Add delta labels.\n        this.addDeltaLabels(yOffset, paddingH, xPadding);\n    }\n\n    /**\n     * Adds the delta labels including the heading.\n     *\n     * @param yOffset The y offset of the delta text area.\n     * @param paddingH The height padding.\n     * @param xRowOffset The row offset.\n     */\n    private addDeltaLabels(yOffset: number, paddingH: number, xRowOffset: number) {\n        this.addDeltaHeadingText(yOffset);\n        this.addNegativeDeltaLabels(yOffset, paddingH, xRowOffset);\n\n        const numberOfEntriesPerRow = 3;\n        this.addETFDeltaLabels(yOffset, paddingH, numberOfEntriesPerRow);\n\n        const totalRowYPos = yOffset + this.standardFontSize * 2 + paddingH;\n        this.addTotalDeltaLabel(numberOfEntriesPerRow, totalRowYPos);\n        this.addPayoutAndInvestedDeltaLabels(numberOfEntriesPerRow, totalRowYPos);\n    }\n\n    /**\n     * Adds the total delta label.\n     *\n     * @param numberOfEntriesPerRow The number of entries per row.\n     * @param totalRowYPos The y position of the row that contains the total label.\n     */\n    private addTotalDeltaLabel(numberOfEntriesPerRow: number, totalRowYPos: number) {\n        this.addTextProperty(this.totalIdentifier + this.deltaIdentifier, {\n            text: generateLabel(this.totalIdentifier),\n            x: (this.width / numberOfEntriesPerRow) * 0,\n            y: totalRowYPos,\n            color: this.totalColor,\n        });\n        this.addTextProperty(this.totalIdentifier + this.deltaIdentifier + this.labelValueIdentifier, {\n            text: this.valueToDisplayText(undefined),\n            x: (this.width / numberOfEntriesPerRow) * 0 + this.valueTextOffset,\n            y: totalRowYPos,\n            color: this.totalColor,\n            fontFamily: this.monospaceFont,\n            textAnchor: this.endTextAnchor,\n        });\n    }\n\n    /**\n     * Adds the etf delta labels.\n     *\n     * @param yOffset The y offset of the delta text area.\n     * @param paddingH The height padding.\n     * @param numberOfEntriesPerRow The number of entries per row.\n     */\n    private addETFDeltaLabels(yOffset: number, paddingH: number, numberOfEntriesPerRow: number) {\n        for (let i = 0; i < this.etfIdentifiers.length; i++) {\n            // ETF Label.\n            const yPos = yOffset + (this.standardFontSize + paddingH) * (i + 3);\n            this.addTextProperty(this.etfIdentifiers[i] + this.deltaIdentifier, {\n                text: ETF_SYMBOL_TO_NAME[this.etfIdentifiers[i]],\n                x: (this.width / numberOfEntriesPerRow) * 0,\n                y: yPos,\n                color: this.etfLineColors[this.etfIdentifiers[i]].total,\n            });\n            // Total.\n            this.addTextProperty(this.etfIdentifiers[i] + this.deltaIdentifier + this.totalIdentifier, {\n                text: generateLabel(this.totalIdentifier),\n                x: (this.width / numberOfEntriesPerRow) * 1,\n                y: yPos,\n                color: this.etfLineColors[this.etfIdentifiers[i]].total,\n            });\n            this.addTextProperty(\n                this.etfIdentifiers[i] + this.deltaIdentifier + this.labelValueIdentifier + this.totalIdentifier,\n                {\n                    text: this.valueToDisplayText(undefined),\n                    x: (this.width / numberOfEntriesPerRow) * 1 + this.valueTextOffset,\n                    y: yPos,\n                    color: this.etfLineColors[this.etfIdentifiers[i]].total,\n                    fontFamily: this.monospaceFont,\n                    textAnchor: this.endTextAnchor,\n                }\n            );\n            // Invested\n            this.addTextProperty(this.etfIdentifiers[i] + this.deltaIdentifier + this.investedIdentifier, {\n                text: generateLabel(this.investedIdentifier),\n                x: (this.width / numberOfEntriesPerRow) * 2,\n                y: yPos,\n                color: this.etfLineColors[this.etfIdentifiers[i]].invested,\n            });\n            this.addTextProperty(\n                this.etfIdentifiers[i] + this.deltaIdentifier + this.labelValueIdentifier + this.investedIdentifier,\n                {\n                    text: this.valueToDisplayText(undefined),\n                    x: (this.width / numberOfEntriesPerRow) * 2 + this.valueTextOffset,\n                    y: yPos,\n                    color: this.etfLineColors[this.etfIdentifiers[i]].invested,\n                    fontFamily: this.monospaceFont,\n                    textAnchor: this.endTextAnchor,\n                }\n            );\n        }\n    }\n\n    /**\n     * Adds the delta payout and invested label.\n     * @param numberOfEntriesPerRow The number of entries per row.\n     * @param totalRowYPos The y position of the row that contains the payout and invested label.\n     */\n    private addPayoutAndInvestedDeltaLabels(numberOfEntriesPerRow: number, totalRowYPos: number) {\n        this.textProperties[payoutIdentifier + this.deltaIdentifier] = {\n            text: generateLabel(payoutIdentifier),\n            x: (this.width / numberOfEntriesPerRow) * 1,\n            y: totalRowYPos,\n            fontSize: this.standardFontSize,\n            fontFamily: this.standardFont,\n            textAnchor: this.startTextAnchor,\n            fontWeight: this.boldText,\n            color: cashflowChartColors[payoutIdentifier].second,\n        };\n\n        this.textProperties[payoutIdentifier + this.deltaIdentifier + this.labelValueIdentifier] = {\n            text: this.valueToDisplayText(undefined),\n            x: (this.width / numberOfEntriesPerRow) * 1 + this.valueTextOffset,\n            y: totalRowYPos,\n            fontSize: this.standardFontSize,\n            fontFamily: this.monospaceFont,\n            textAnchor: this.endTextAnchor,\n            fontWeight: this.boldText,\n            color: cashflowChartColors[payoutIdentifier].second,\n        };\n\n        this.textProperties[investedIdentifier + this.deltaIdentifier] = {\n            text: generateLabel(investedIdentifier),\n            x: (this.width / numberOfEntriesPerRow) * 2,\n            y: totalRowYPos,\n            fontSize: this.standardFontSize,\n            fontFamily: this.standardFont,\n            textAnchor: this.startTextAnchor,\n            fontWeight: this.boldText,\n            color: cashflowChartColors[investedIdentifier].second,\n        };\n\n        this.textProperties[investedIdentifier + this.deltaIdentifier + this.labelValueIdentifier] = {\n            text: this.valueToDisplayText(undefined),\n            x: (this.width / numberOfEntriesPerRow) * 2 + this.valueTextOffset,\n            y: totalRowYPos,\n            fontSize: this.standardFontSize,\n            fontFamily: this.monospaceFont,\n            textAnchor: this.endTextAnchor,\n            fontWeight: this.boldText,\n            color: cashflowChartColors[investedIdentifier].second,\n        };\n    }\n\n    /**\n     * Adds the negative delta labels (costs, taxes, inflation).\n     *\n     * @param yOffset The y offset of the delta text area.\n     * @param paddingH The height padding.\n     * @param xRowOffset The row offset.\n     */\n    private addNegativeDeltaLabels(yOffset: number, paddingH: number, xRowOffset: number) {\n        for (let i = 0; i < this.negativeLabels.length; i++) {\n            const yPos = yOffset + (this.standardFontSize + paddingH) * (3.5 + this.etfIdentifiers.length);\n            const color = this.negativeColors[this.negativeLabels[i]];\n            this.addTextProperty(this.negativeLabels[i] + this.deltaIdentifier, {\n                text: generateLabel(this.negativeLabels[i]),\n                x: xRowOffset * i,\n                y: yPos,\n                color: color,\n            });\n            this.addTextProperty(this.negativeLabels[i] + this.deltaIdentifier + this.labelValueIdentifier, {\n                text: this.valueToDisplayText(undefined),\n                x: xRowOffset * i + this.valueTextOffset,\n                y: yPos,\n                color: color,\n                fontFamily: this.monospaceFont,\n                textAnchor: this.endTextAnchor,\n            });\n        }\n    }\n\n    /**\n     * Adds the delta area heading.\n     *\n     * @param yOffset The y offset of the delta text area.\n     */\n    private addDeltaHeadingText(yOffset: number) {\n        this.addTextProperty(this.deltaIdentifier, {\n            text: 'Differences to Previous Configuration:',\n            x: this.xScale(\n                this.dateExtent[0].valueOf() + (this.dateExtent[1].valueOf() - this.dateExtent[0].valueOf()) / 2\n            ),\n            y: yOffset + this.standardFontSize,\n            color: 'black',\n            textAnchor: 'middle',\n        });\n    }\n\n    /**\n     * Adds the total label.\n     */\n    private addTotalLabel() {\n        this.addTextProperty(this.totalIdentifier, {\n            text: generateLabel(this.totalIdentifier),\n            x: this.xTextOffset,\n            y: this.yScale(this.yExtent[1]),\n            color: this.totalColor,\n        });\n        this.addTextProperty(this.totalIdentifier + this.labelValueIdentifier, {\n            text: this.valueToDisplayText(undefined),\n            x: this.xTextOffset + this.valueTextOffset,\n            y: this.yScale(this.yExtent[1]),\n            color: this.totalColor,\n            fontFamily: this.monospaceFont,\n            textAnchor: this.endTextAnchor,\n        });\n    }\n\n    /**\n     * Adds all active ETF labels. Per ETF the invested and total amount are added.\n     */\n    private addETFLabels(paddingH: number) {\n        for (let i = 0; i < this.etfIdentifiers.length; i++) {\n            // ETF Label.\n            this.addTextProperty(this.etfIdentifiers[i], {\n                text: ETF_SYMBOL_TO_NAME[this.etfIdentifiers[i]],\n                x: this.xTextOffset,\n                y: this.yScale(0) - (this.standardFontSize + paddingH) * i * 3 - 2 * this.standardFontSize,\n                color: this.etfLineColors[this.etfIdentifiers[i]].total,\n            });\n            // Total\n            this.addTextProperty(this.etfIdentifiers[i] + this.totalIdentifier, {\n                text: generateLabel(this.totalIdentifier),\n                x: this.xTextOffset,\n                y: this.yScale(0) - (this.standardFontSize + paddingH) * i * 3 - 1 * this.standardFontSize,\n                color: this.etfLineColors[this.etfIdentifiers[i]].total,\n            });\n            this.addTextProperty(this.etfIdentifiers[i] + this.labelValueIdentifier + this.totalIdentifier, {\n                text: this.valueToDisplayText(undefined),\n                x: this.xTextOffset + this.valueTextOffset,\n                y: this.yScale(0) - (this.standardFontSize + paddingH) * i * 3 - 1 * this.standardFontSize,\n                color: this.etfLineColors[this.etfIdentifiers[i]].total,\n                fontFamily: this.monospaceFont,\n                textAnchor: this.endTextAnchor,\n            });\n            // Invested\n            this.addTextProperty(this.etfIdentifiers[i] + this.investedIdentifier, {\n                text: generateLabel(this.investedIdentifier),\n                x: this.xTextOffset,\n                y: this.yScale(0) - (this.standardFontSize + paddingH) * i * 3 - 0 * this.standardFontSize,\n                color: this.etfLineColors[this.etfIdentifiers[i]].invested,\n            });\n            this.addTextProperty(this.etfIdentifiers[i] + this.labelValueIdentifier + this.investedIdentifier, {\n                text: this.valueToDisplayText(undefined),\n                x: this.xTextOffset + this.valueTextOffset,\n                y: this.yScale(0) - (this.standardFontSize + paddingH) * i * 3 - 0 * this.standardFontSize,\n                color: this.etfLineColors[this.etfIdentifiers[i]].invested,\n                fontFamily: this.monospaceFont,\n                textAnchor: this.endTextAnchor,\n            });\n        }\n    }\n\n    /**\n     * Adds all negative labels (taxes, costs, inflation).\n     */\n    private addNegativeLabels(paddingH: number) {\n        for (let i = 0; i < this.negativeLabels.length; i++) {\n            const yPos = this.yScale(0) + (this.standardFontSize + paddingH) * (i + 1);\n            const color = this.negativeColors[this.negativeLabels[i]];\n            this.addTextProperty(this.negativeLabels[i], {\n                text: generateLabel(this.negativeLabels[i]),\n                x: this.xTextOffset,\n                y: yPos,\n                color: color,\n            });\n            this.addTextProperty(this.negativeLabels[i] + this.labelValueIdentifier, {\n                text: this.valueToDisplayText(undefined),\n                x: this.xTextOffset + this.valueTextOffset,\n                y: yPos,\n                color: color,\n                fontFamily: this.monospaceFont,\n                textAnchor: this.endTextAnchor,\n            });\n        }\n    }\n\n    /**\n     * Updates the textProperties according to the investment step the tooltip is currently on.\n     *\n     * @param investmentStepIndex The index of the investment step of at the current mouse position.\n     */\n    protected _updateTooltip(investmentStepIndex: number) {\n        // Update ETF Values.\n        for (const etfIdentifier of this.etfIdentifiers) {\n            const totalValue = getTotalShareValue(etfIdentifier, this.investmentSteps[investmentStepIndex]);\n            const totalDividendValue = getTotalDividendShareValue(\n                etfIdentifier,\n                this.investmentSteps[investmentStepIndex]\n            );\n            const investedValue = totalValue - totalDividendValue;\n            this.textProperties[etfIdentifier + this.labelValueIdentifier + this.investedIdentifier].text =\n                this.valueToDisplayText(investedValue, true);\n            this.textProperties[etfIdentifier + this.labelValueIdentifier + this.totalIdentifier].text =\n                this.valueToDisplayText(totalValue, true);\n        }\n        // Update negative values.\n        for (const negativeLabel of this.negativeLabels) {\n            const value = this.investmentSteps[investmentStepIndex][negativeLabel];\n            this.textProperties[negativeLabel + this.labelValueIdentifier].text = this.valueToDisplayText(value, true);\n        }\n        // Update total values.\n        let totalValue = 0;\n        for (const etfIdentifier of this.etfIdentifiers) {\n            totalValue += getTotalShareValue(etfIdentifier, this.investmentSteps[investmentStepIndex]);\n        }\n        totalValue -= this.subtractInflationFromTotal ? this.investmentSteps[investmentStepIndex].inflation : 0;\n        this.textProperties[this.totalIdentifier + this.labelValueIdentifier].text =\n            this.valueToDisplayText(totalValue);\n\n        // Set the delta Values if the previous model exists.\n        if (this.previousInvestmentSteps != null && this.previousInvestmentSteps.length > investmentStepIndex) {\n            // Negative labels.\n            for (const negativeLabel of this.negativeLabels) {\n                const currentValue = this.investmentSteps[investmentStepIndex][negativeLabel];\n                const previousValue = this.previousInvestmentSteps[investmentStepIndex][negativeLabel];\n                const value = currentValue - previousValue;\n                this.textProperties[negativeLabel + this.deltaIdentifier + this.labelValueIdentifier].text =\n                    this.valueToDisplayText(value, true);\n            }\n\n            // ETF labels.\n            for (const etfIdentifier of this.etfIdentifiers) {\n                const currentTotalValue = getTotalShareValue(etfIdentifier, this.investmentSteps[investmentStepIndex]);\n                const currentTotalDividendValue = getTotalDividendShareValue(\n                    etfIdentifier,\n                    this.investmentSteps[investmentStepIndex]\n                );\n                const currentInvestedValue = currentTotalValue - currentTotalDividendValue;\n\n                const previousTotalValue = getTotalShareValue(\n                    etfIdentifier,\n                    this.previousInvestmentSteps[investmentStepIndex]\n                );\n                const previousTotalDividendValue = getTotalDividendShareValue(\n                    etfIdentifier,\n                    this.previousInvestmentSteps[investmentStepIndex]\n                );\n                const previousInvestedValue = previousTotalValue - previousTotalDividendValue;\n\n                const investedValue = currentInvestedValue - previousInvestedValue;\n                const totalValue = currentTotalValue - previousTotalValue;\n                this.textProperties[\n                    etfIdentifier + this.deltaIdentifier + this.labelValueIdentifier + this.investedIdentifier\n                ].text = this.valueToDisplayText(investedValue);\n                this.textProperties[\n                    etfIdentifier + this.deltaIdentifier + this.labelValueIdentifier + this.totalIdentifier\n                ].text = this.valueToDisplayText(totalValue);\n            }\n\n            // Total Value.\n            let previousTotalValue = 0;\n            for (const etfIdentifier of this.etfIdentifiers) {\n                previousTotalValue += getTotalShareValue(\n                    etfIdentifier,\n                    this.previousInvestmentSteps[investmentStepIndex]\n                );\n            }\n            previousTotalValue -= this.subtractInflationFromTotal\n                ? this.previousInvestmentSteps[investmentStepIndex].inflation\n                : 0;\n            this.textProperties[this.totalIdentifier + this.deltaIdentifier + this.labelValueIdentifier].text =\n                this.valueToDisplayText(totalValue - previousTotalValue);\n\n            // Payout.\n            const previousPayout = getSumNewPayout(this.previousInvestmentSteps[investmentStepIndex]);\n            const currentPayout = getSumNewPayout(this.investmentSteps[investmentStepIndex]);\n            this.textProperties[payoutIdentifier + this.deltaIdentifier + this.labelValueIdentifier].text =\n                this.valueToDisplayText(currentPayout - previousPayout);\n\n            // Invested.\n            const previousInvested = this.previousInvestmentSteps[investmentStepIndex].newInvestment;\n            const currentInvested = this.investmentSteps[investmentStepIndex].newInvestment;\n            this.textProperties[investedIdentifier + this.deltaIdentifier + this.labelValueIdentifier].text =\n                this.valueToDisplayText(currentInvested - previousInvested);\n            // Set all delta value to undefined if the investmentStep is not included in the previous investment steps.\n        } else if (this.previousInvestmentSteps != null && this.previousInvestmentSteps.length <= investmentStepIndex) {\n            for (const textPropertyIdentifier in this.textProperties) {\n                if (\n                    textPropertyIdentifier.includes(this.deltaIdentifier) &&\n                    textPropertyIdentifier.includes(this.labelValueIdentifier)\n                ) {\n                    this.textProperties[textPropertyIdentifier].text = this.valueToDisplayText(undefined);\n                }\n            }\n        }\n    }\n}\n","import * as d3 from 'd3';\nimport { ETFRatio, InvestmentStep, sumOfTotalValues } from '../model/InvestmentModel';\nimport { DataArrayEntry } from './D3ChartStrategy';\nimport { AreaChartD3 } from './AreaChartD3';\n\n/**\n * A class that draws an area chart that contains the value of costs, taxes,\n * inflation and the total value and invested value of all used ETFs.\n */\nexport class ConfidenceChartD3 extends AreaChartD3 {\n    protected readonly contentOpacity: number = 0.65 / 2;\n    protected readonly confidenceAreaOpacity: number = 0.65;\n\n    private readonly confidenceColors = {\n        minimumLine: '#ff3e58',\n        maximumLine: '#00e396',\n        middleLine: this.totalColor,\n        area: '#a6d8fe',\n    };\n    private minInvestmentSteps: InvestmentStep[];\n    private maxInvestmentSteps: InvestmentStep[];\n\n    /**\n     * Constructs the area chart by calling the base class constructor and determining all used ETFs.\n     */\n    constructor(\n        investmentSteps: InvestmentStep[],\n        minInvestmentSteps: InvestmentStep[],\n        maxInvestmentSteps: InvestmentStep[],\n        renderDivRef: HTMLDivElement,\n        payoutPhaseStartDate: Date,\n        tooltipDate: Date | undefined,\n        yExtent: [number, number] | undefined,\n        etfRatio: ETFRatio,\n        subtractInflationFromTotal: boolean,\n        previousInvestmentSteps: InvestmentStep[] | undefined\n    ) {\n        super(\n            investmentSteps,\n            renderDivRef,\n            payoutPhaseStartDate,\n            tooltipDate,\n            yExtent,\n            etfRatio,\n            subtractInflationFromTotal,\n            previousInvestmentSteps\n        );\n        this.minInvestmentSteps = minInvestmentSteps;\n        this.maxInvestmentSteps = maxInvestmentSteps;\n        this.subtractInflationFromTotal = subtractInflationFromTotal;\n    }\n\n    /**\n     * Prepares all data from the investment model for rendering.\n     */\n    protected _prepareData() {\n        super._prepareData();\n        let idx = Math.max(...Object.values(this.dataToIndex));\n        this.dataToIndex = {\n            areaConfidence: ++idx,\n        };\n\n        this.maxIndex = this.dataToIndex.areaConfidence;\n\n        this.dataArray.push([]);\n        for (let i = 0; i < this.investmentSteps.length; i++) {\n            this.dataArray[this.dataToIndex.areaConfidence].push({\n                yStart:\n                    sumOfTotalValues(this.minInvestmentSteps[i]) -\n                    (this.subtractInflationFromTotal ? this.minInvestmentSteps[i].inflation : 0),\n                yEnd:\n                    sumOfTotalValues(this.maxInvestmentSteps[i]) -\n                    (this.subtractInflationFromTotal ? this.maxInvestmentSteps[i].inflation : 0),\n                date: this.investmentSteps[i].date,\n                color: this.confidenceColors.area,\n            });\n        }\n    }\n\n    /**\n     * Draws all lines of the chart. I.e. the middle line.\n     */\n    protected _drawLines() {\n        super._drawLines();\n        const lineDataArray = [\n            this.dataArray[this.dataToIndex.areaConfidence],\n            this.dataArray[this.dataToIndex.areaConfidence],\n        ];\n        const lookupIdentifier: ('yStart' | 'yEnd')[] = ['yStart', 'yEnd', 'yStart'];\n        const confidenceColors = [this.confidenceColors.minimumLine, this.confidenceColors.maximumLine];\n        for (let i = 0; i < lineDataArray.length; i++) {\n            this.svg\n                .append('path')\n                .datum(lineDataArray[i])\n                .style('stroke', confidenceColors[i])\n                .style('stroke-width', this.lineStrokeWidth)\n                .style('fill', 'none')\n                .attr(\n                    'd',\n                    d3\n                        .line<DataArrayEntry>()\n                        .x(d => this.xScale(d.date))\n                        .y((_, j) => {\n                            return this.yScale(lineDataArray[i][j][lookupIdentifier[i]]);\n                        })\n                );\n        }\n    }\n\n    /**\n     * Draws the main content of the diagram. Currently a stacked area chart.\n     */\n    protected _drawContent() {\n        this._drawArea();\n        this._drawLines();\n    }\n\n    /**\n     * Draws the stacked areas of the diagram.\n     */\n    protected _drawArea() {\n        super._drawArea();\n        // Draw stacked area chart.\n        this.svg\n            .append('g')\n            .attr('class', 'area')\n            .append('path')\n            .datum(this.dataArray[this.dataToIndex.areaConfidence])\n            .style('opacity', this.confidenceAreaOpacity)\n            .style('fill', d => d[0].color)\n            .attr(\n                'd',\n                d3\n                    .area<DataArrayEntry>()\n                    .curve(d3.curveMonotoneX)\n                    .x(d => this.xScale(d.date))\n                    .y0(d => this.yScale(d.yEnd))\n                    .y1(d => this.yScale(d.yStart))\n            );\n    }\n}\n","import React from 'react';\nimport {\n    STARTING_CAPITAL_IDENTIFIER,\n    MONTHLY_INVESTMENT_IDENTIFIER,\n    YEARLY_INVESTMENT_INCREASE_IDENTIFIER,\n    SAVING_PHASE_IDENTIFIER,\n    AGE_IDENTIFIER,\n    TAX_FREE_AMOUNT_IDENTIFIER,\n    MONTHLY_PAYOUT_IDENTIFIER,\n    YEARLY_PAYOUT_INCREASE_IDENTIFIER,\n    LIFE_EXPECTATION_IDENTIFIER,\n    DETAILED_GRAPH_DROPDOWN_IDENTIFIER,\n    Y_AXIS_LOCK_IDENTIFIER,\n    INFLATION_USED_FOR_TOTAL,\n    USE_DISTRIBUTION_MODEL,\n    MIDDLE_CONFIDENCE,\n    USE_CONFIDENCE_VISUALIZATION,\n    generateCostConfig,\n    MIN_CONFIDENCE,\n    MAX_CONFIDENCE,\n} from './App';\nimport { InvestmentModel, ETFRatio } from '../model/InvestmentModel';\nimport { AreaChartD3 } from '../renderer/AreaChartD3';\nimport { CashflowBarChart } from '../renderer/CashflowBarChartD3';\nimport { ConfidenceChartD3 } from '../renderer/ConfidenceChartD3';\nimport { D3ChartStrategy } from '../renderer/D3ChartStrategy';\nimport { IAppState } from './App';\nimport { percentageToFloat } from '../helpers/utils';\nimport { NumberInputStateIdentifier } from './TextInputElement';\n\nexport interface IConfigOptions {\n    costConfig: ICostConfiguration;\n    taxFreeAmount: number;\n    confidence: number;\n}\n\nexport interface ICostConfiguration {\n    percentageCosts: number;\n    fixedCosts: number;\n}\n\n/**\n * React component which handles the visualization.\n * It re-renders the visualizations each time the state changes.\n */\nexport class Visualization extends React.Component<IAppState, {}> {\n    private firstSVGRef = React.createRef<HTMLDivElement>();\n    private secondSVGRef = React.createRef<HTMLDivElement>();\n\n    private trendChart: AreaChartD3 | ConfidenceChartD3 | undefined = undefined;\n    private cashflowChart: CashflowBarChart | undefined = undefined;\n\n    private investmentModel: InvestmentModel | undefined = undefined;\n\n    /**\n     * Generates the etf to ratio mapping for all currently selected etfs.\n     *\n     * @returns The etf to ratio mapping.\n     */\n    private _getETFIdentifierToRatio(): ETFRatio {\n        const etfIdentifierToRatio: ETFRatio = {};\n        const etfProperties = this.props.etfDropdownSelection.elements;\n        for (const etfIdentifier in etfProperties) {\n            if (etfProperties[etfIdentifier].selected) {\n                etfIdentifierToRatio[etfProperties[etfIdentifier].symbol] = percentageToFloat(\n                    etfProperties[etfIdentifier].value\n                );\n            }\n        }\n        return etfIdentifierToRatio;\n    }\n\n    /**\n     * Calculates the investment model for the current properties.\n     *\n     * @param etfIdentifierToRatio The etfIdentifier mapping to the ratio.\n     * @param confidenceIdentifier The confidence identifier which should be used for the model.\n     * @returns The investment model for the current state.\n     */\n    private _getInvestmentModel(\n        etfIdentifierToRatio: ETFRatio,\n        confidenceIdentifier: NumberInputStateIdentifier\n    ): InvestmentModel {\n        const configOptions: IConfigOptions = {\n            taxFreeAmount: this.props[TAX_FREE_AMOUNT_IDENTIFIER].value,\n            costConfig: generateCostConfig(this.props, true),\n            confidence: percentageToFloat(this.props[confidenceIdentifier].value),\n        };\n\n        return new InvestmentModel(\n            this.props[STARTING_CAPITAL_IDENTIFIER].value,\n            this.props[MONTHLY_INVESTMENT_IDENTIFIER].value,\n            percentageToFloat(this.props[YEARLY_INVESTMENT_INCREASE_IDENTIFIER].value),\n            this.props[MONTHLY_PAYOUT_IDENTIFIER].value,\n            percentageToFloat(this.props[YEARLY_PAYOUT_INCREASE_IDENTIFIER].value),\n            this.props[SAVING_PHASE_IDENTIFIER].value,\n            etfIdentifierToRatio,\n            configOptions,\n            this.props[AGE_IDENTIFIER].value,\n            this.props[LIFE_EXPECTATION_IDENTIFIER].value,\n            this.props[USE_DISTRIBUTION_MODEL].value\n        );\n    }\n\n    /**\n     * Returns the tooltip date if it existed in the last visualization.\n     *\n     * @returns The tooltip date if defined.\n     */\n    private _getTooltipDate(): Date | undefined {\n        if (this.trendChart != null) {\n            return this.trendChart.tooltipDate;\n        } else if (this.cashflowChart != null) {\n            return this.cashflowChart.tooltipDate;\n        } else {\n            return undefined;\n        }\n    }\n\n    /**\n     * Returns the y extent if it exists and the y axis should be locked.\n     *\n     * @returns The y extent if defined and axis should be locked.\n     */\n    private _getYAxisExtent(diagram: D3ChartStrategy | undefined) {\n        return diagram != null && this.props[Y_AXIS_LOCK_IDENTIFIER].value ? diagram.yExtent : undefined;\n    }\n\n    /**\n     * Draws both charts.\n     */\n    private _drawVisualization() {\n        D3ChartStrategy.reset();\n        try {\n            if (this.props.isValid && this.firstSVGRef.current != null && this.secondSVGRef.current != null) {\n                const etfIdentifierToRatio = this._getETFIdentifierToRatio();\n                const previousInvestmentSteps =\n                    this.investmentModel != null\n                        ? this.investmentModel.getInvestmentSteps(this.props[DETAILED_GRAPH_DROPDOWN_IDENTIFIER].value)\n                        : undefined;\n                this.investmentModel = this._getInvestmentModel(etfIdentifierToRatio, MIDDLE_CONFIDENCE);\n                const firstPayoutPhaseDate = this.investmentModel.getPayoutPhaseBeginDate();\n                const correctLevelOfDetailInvestmentSteps = this.investmentModel.getInvestmentSteps(\n                    this.props[DETAILED_GRAPH_DROPDOWN_IDENTIFIER].value\n                );\n                let tooltipDate = this._getTooltipDate();\n                if (!this.props[USE_CONFIDENCE_VISUALIZATION].value) {\n                    this.trendChart = new AreaChartD3(\n                        correctLevelOfDetailInvestmentSteps,\n                        this.firstSVGRef.current,\n                        firstPayoutPhaseDate,\n                        tooltipDate,\n                        this._getYAxisExtent(this.trendChart),\n                        etfIdentifierToRatio,\n                        this.props[INFLATION_USED_FOR_TOTAL].value,\n                        previousInvestmentSteps\n                    );\n                    this.trendChart.render();\n                } else {\n                    this.trendChart = new ConfidenceChartD3(\n                        correctLevelOfDetailInvestmentSteps,\n                        this._getInvestmentModel(etfIdentifierToRatio, MIN_CONFIDENCE).getInvestmentSteps(\n                            this.props[DETAILED_GRAPH_DROPDOWN_IDENTIFIER].value\n                        ),\n                        this._getInvestmentModel(etfIdentifierToRatio, MAX_CONFIDENCE).getInvestmentSteps(\n                            this.props[DETAILED_GRAPH_DROPDOWN_IDENTIFIER].value\n                        ),\n                        this.firstSVGRef.current,\n                        firstPayoutPhaseDate,\n                        tooltipDate,\n                        this._getYAxisExtent(this.trendChart),\n                        etfIdentifierToRatio,\n                        this.props[INFLATION_USED_FOR_TOTAL].value,\n                        previousInvestmentSteps\n                    );\n                    this.trendChart.render();\n                }\n                this.cashflowChart = new CashflowBarChart(\n                    correctLevelOfDetailInvestmentSteps,\n                    this.secondSVGRef.current,\n                    firstPayoutPhaseDate,\n                    tooltipDate,\n                    this._getYAxisExtent(this.cashflowChart)\n                );\n                this.cashflowChart.render();\n            }\n        } catch (e) {\n            console.error(e);\n        }\n    }\n\n    /**\n     * Draws the visualization if the component has been drawn for the first time.\n     */\n    componentDidMount() {\n        this._drawVisualization();\n    }\n\n    /**\n     * Draws the visualization if the state changed.\n     */\n    componentDidUpdate() {\n        this._drawVisualization();\n    }\n\n    /**\n     * Renders the divs with the references for the charts.\n     *\n     * @returns The divs holding the references for the charts.\n     */\n    render() {\n        return (\n            <React.Fragment>\n                <div ref={this.secondSVGRef}></div>\n                <div ref={this.firstSVGRef}></div>\n            </React.Fragment>\n        );\n    }\n}\n","interface IErrorMessage {\n    identifier: string;\n    isValid: boolean;\n    errorMessage: string;\n}\n\n/**\n * Renders an error message as a tooltip.\n * \n * @param props The error message properties.\n * @returns The rendered error message.\n */\nexport function ErrorMessage(props: IErrorMessage) {\n    return (\n        <div\n            id={props.identifier + 'Feedback'}\n            className=\"invalid-tooltip\"\n            style={{ visibility: props.isValid ? 'hidden' : 'visible' }}>\n            {props.errorMessage}\n        </div>\n    );\n}\n","import { ErrorMessage } from './ErrorMessageComponent';\n\nexport interface INumberInputState {\n    value: number;\n    label: string;\n    errorMessage: string;\n    textAppending: string;\n    isValid: boolean;\n    disabled: boolean;\n    identifier: TextInputStateIdentifier;\n    noLabel?: boolean;\n    onValueChange: (\n        changedValue: string,\n        changedStateIdentifier: TextInputStateIdentifier,\n        stateIsNumber: boolean\n    ) => void;\n}\n\nexport interface ITextInputState {\n    value: string;\n    label: string;\n    errorMessage: string;\n    textAppending: string;\n    isValid: boolean;\n    disabled: boolean;\n    noLabel?: boolean;\n    identifier: TextInputStateIdentifier;\n    onValueChange: (changedValue: string, changedStateIdentifier: TextInputStateIdentifier) => void;\n}\n\nexport interface IETFTextInputState {\n    value: number;\n    label: string;\n    errorMessage: string;\n    textAppending: string;\n    isValid: boolean;\n    disabled: boolean;\n    noLabel?: boolean;\n    identifier: string;\n    onValueChange: (changedValue: string, changedStateIdentifier: string) => void;\n}\n\nexport type NumberInputStateIdentifier =\n    | 'startingCapital'\n    | 'monthlyInvestment'\n    | 'monthlyPayout'\n    | 'transactionPercentageCosts'\n    | 'transactionFixedCosts'\n    | 'savingPhase'\n    | 'age'\n    | 'lifeExpectation'\n    | 'taxFreeAmount'\n    | 'yearlyInvestmentIncrease'\n    | 'yearlyPayoutIncrease'\n    | 'minConfidence'\n    | 'maxConfidence'\n    | 'middleConfidence';\n\nexport type TextInputStateIdentifier = NumberInputStateIdentifier | 'apiKey';\n\n/**\n * Renders the label for a input element based on the props of the calling element.\n *\n * @param props Props by the calling text element.\n * @returns Rendered label.\n */\nexport function InputLabel(props: INumberInputState | IETFTextInputState | ITextInputState) {\n    if (props.noLabel) {\n        return null;\n    } else if (props.textAppending.length > 0) {\n        return (\n            <label className=\"form-label\" htmlFor={props.identifier}>\n                {props.label} in <span className=\"inputUnit\">{props.textAppending}</span>\n            </label>\n        );\n    } else {\n        return (\n            <label className=\"form-label\" htmlFor={props.identifier}>\n                {props.label}\n            </label>\n        );\n    }\n}\n\n/**\n * Renders a text or number input element.\n *\n * @param props The text or number input properties.\n * @returns The rendered text or number input.\n */\nexport function TextOrNumberInputElement(props: INumberInputState | ITextInputState) {\n    const isNumericInput = typeof props.value === 'number';\n    return (\n        <div className=\"position-relative\">\n            <InputLabel {...props} />\n            <input\n                className={'form-control ' + (props.isValid ? '' : 'is-invalid')}\n                id={props.identifier}\n                type={isNumericInput ? 'number' : 'text'}\n                value={props.value}\n                onChange={e => props.onValueChange(e.target.value, props.identifier, isNumericInput)}\n                disabled={props.disabled}\n            />\n            <ErrorMessage {...props} />\n        </div>\n    );\n}\n\n/**\n * Renders a text input element without strict identifier. Intended for the etf drop down.\n *\n * @param props The etf text input properties.\n * @returns The rendered text input.\n */\nexport function ETFTextInputElement(props: IETFTextInputState) {\n    return (\n        <div className=\"position-relative\">\n            <InputLabel {...props} />\n            <input\n                className={'form-control ' + (props.isValid ? '' : 'is-invalid')}\n                id={props.identifier}\n                type=\"number\"\n                value={props.value}\n                onChange={e => props.onValueChange(e.target.value, props.identifier)}\n                disabled={props.disabled}\n            />\n            <ErrorMessage {...props} />\n        </div>\n    );\n}\n","export interface ICheckboxState {\n    value: boolean;\n    label: string;\n    identifier: ICheckBoxStateIdentifier;\n    onValueChange: (changedStateIdentifier: ICheckBoxStateIdentifier) => void;\n}\n\nexport type ICheckBoxStateIdentifier =\n    | 'etfAutomaticPercentage'\n    | 'yAxisLock'\n    | 'inflationUsedForTotal'\n    | 'useDistributionModel'\n    | 'useConfidenceVisualization';\n\n/**\n * Renders a checkbox from the given properties.\n *\n * @param props The checkbox properties.\n * @returns The rendered checkbox.\n */\nexport function CheckboxInputElement(props: ICheckboxState) {\n    return (\n        <div className=\"checkbox-element\">\n            <input\n                className=\"form-check-input\"\n                id={props.identifier}\n                type=\"checkbox\"\n                value={props.value.toString()}\n                onChange={() => props.onValueChange(props.identifier)}\n            />\n            <label className=\"form-check-label\" htmlFor={props.identifier}>\n                {props.label}\n            </label>\n        </div>\n    );\n}\n","import { TextOrNumberInputElement, TextInputStateIdentifier } from './TextInputElement';\n\nexport interface IAPIKey {\n    displayOverlay: boolean;\n    value: string;\n    label: string;\n    errorMessage: string;\n    isValid: boolean;\n    textAppending: string;\n    identifier: TextInputStateIdentifier;\n    onValueChange: (changedValue: string, changedStateIdentifier: TextInputStateIdentifier) => void;\n    handleAPIKeyConfirm: () => void;\n    error: boolean;\n}\n\n/**\n * Renders the API Key entering UI.\n *\n * @param props The properties for the api key UI.\n * @returns\n */\nexport function Overlay(props: IAPIKey) {\n    return (\n        <div className=\"row\">\n            <div className=\"col-12 p-0\">\n                <div className=\"d-grid gap-0\">\n                    <div\n                        className=\"overlay min-vh-100 text-center m-0 d-flex flex-column justify-content-center\"\n                        style={{ visibility: props.displayOverlay ? 'visible' : 'hidden' }}>\n                        <h1 className=\"p-5\">\n                            Enter your personal{' '}\n                            <a\n                                href=\"https://www.alphavantage.co/support/#api-key\"\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\">\n                                {' '}\n                                Alphavantage API Key\n                            </a>{' '}\n                        </h1>\n                        <h4>\n                            No changing of the key is required. Simply press Confirm and the visualization is starting.\n                        </h4>\n                        <TextOrNumberInputElement {...props} disabled={!props.displayOverlay} />\n                        <button type=\"button\" className=\"btn btn-primary my-5\" onClick={props.handleAPIKeyConfirm}>\n                            Confirm\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n","interface ISidebarSectionHeading {\n    title: string;\n    initiallyCollapsed: boolean;\n    children: JSX.Element[];\n}\n\n/**\n * Renders a collapsible side bar section header which contains child ui elements.\n *\n * @param props The side bar properties.\n * @returns The rendered side bar section.\n */\nexport function SidebarSectionHeading(props: ISidebarSectionHeading) {\n    const titleID = props.title.replace(/\\W/g, '_');\n    return (\n        <div className=\"position-relative my-4 mb-1\">\n            <div className=\"d-flex my-3\">\n                <button\n                    className={'btn btn-secondary hamburgerButton mt-0 mb-0 pt-0 pb-0 me-4'}\n                    type=\"button\"\n                    data-bs-toggle=\"collapse\"\n                    data-bs-target={`#${titleID}`}\n                    aria-expanded={props.initiallyCollapsed ? 'false' : 'true'}\n                    aria-controls={titleID}>\n                    ☰\n                </button>\n                <h6 className=\"sidebar-heading m-0 my-auto\">{props.title}</h6>\n            </div>\n            <div className={'collapse ' + (props.initiallyCollapsed ? '' : 'show')} id={titleID}>\n                {props.children}\n            </div>\n        </div>\n    );\n}\n","import { ICostConfiguration } from './Visualization';\n\nexport interface BrokerProperties {\n    identifier: string;\n    label: string;\n    fixedCosts: number;\n    percentageCosts: number;\n}\n\nexport interface IBrokerDropDown {\n    label: string;\n    isValid: boolean;\n    handleChange: (brokerProperties: BrokerProperties) => void;\n    elements: BrokerProperties[];\n}\n\ntype BrokerDropDownProps = ICostConfiguration & IBrokerDropDown;\n\n/**\n * Tests if the given element properties match the current broker cost properties.\n *\n * @param props The broker properties.\n * @param element The broker element properties.\n * @returns If the element matches the broker cost properties.\n */\nfunction costsOfElementMatchUIValues(props: BrokerDropDownProps, element: BrokerProperties) {\n    return element.fixedCosts === props.fixedCosts && element.percentageCosts === props.percentageCosts;\n}\n\n/**\n * Renders the broker drop down element.\n * An element is displayed as selected if the current cost configuration matches that of the element.\n *\n * @param props The broker properties.\n * @returns The rendering of the broker drop down.\n */\nexport function BrokerDropDown(props: BrokerDropDownProps) {\n    return (\n        <div className=\"dropdown\">\n            <button\n                className=\"btn btn-secondary dropdown-toggle\"\n                type=\"button\"\n                id=\"BrokerDropDown\"\n                data-bs-toggle=\"dropdown\"\n                aria-expanded=\"false\">\n                {props.label}\n            </button>\n            <ul className=\"dropdown-menu\" aria-labelledby=\"BrokerDropDown\">\n                {props.elements.map(element => (\n                    <li key={element.identifier}>\n                        <button\n                            className={\n                                costsOfElementMatchUIValues(props, element) ? 'dropdown-item active' : 'dropdown-item'\n                            }\n                            type=\"button\"\n                            onClick={e => props.handleChange(element)}>\n                            {element.label}\n                        </button>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n}\n","export interface IGraphDetailLevel {\n    identifier: string;\n    value: number;\n    label: string;\n}\n\nexport interface IGraphDetailDropDown {\n    value: number;\n    label: string;\n    isValid: boolean;\n    handleChange: (detailProperties: IGraphDetailLevel) => void;\n    elements: IGraphDetailLevel[];\n}\n\n/**\n * Renders a drop down to select the graph level of detail.\n *\n * @param props The graph detail properties.\n * @returns Rendered graph level of detail drop down.\n */\nexport function GraphDetailDropDown(props: IGraphDetailDropDown) {\n    return (\n        <div className=\"dropdown\">\n            <button\n                className=\"btn btn-secondary dropdown-toggle\"\n                type=\"button\"\n                id=\"GraphDetailDropDown\"\n                data-bs-toggle=\"dropdown\"\n                aria-expanded=\"false\">\n                {props.label}\n            </button>\n            <ul className=\"dropdown-menu\" aria-labelledby=\"GraphDetailDropDown\">\n                {props.elements.map(element => (\n                    <li key={element.identifier}>\n                        <button\n                            className={props.value === element.value ? 'dropdown-item active' : 'dropdown-item'}\n                            type=\"button\"\n                            onClick={e => props.handleChange(element)}>\n                            {element.label}\n                        </button>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n}\n","import { MouseEvent } from 'react';\n\nimport { ETFTextInputElement } from './TextInputElement';\nimport { ErrorMessage } from './ErrorMessageComponent';\n\nimport { IETFProperty } from '../model/ForecastModel';\n\ninterface IETFIndex {\n    [etfIdentifier: string]: IETFProperty;\n}\n\nexport interface IETFSelection {\n    label: string;\n    isValid: boolean;\n    identifier: string;\n    errorMessage: string;\n    handleSelectionChange: (etfProperties: IETFProperty) => void;\n    handleShareChange: (changedValue: string, changedStateIdentifier: string) => void;\n    elements: IETFIndex;\n}\n\ntype ETFSelectionDropDownProps = IETFSelection & { autoPercentage: boolean };\n\n/**\n * Renders the ETF selection drop down which includes editable text for the percentages.\n *\n * @param props The etf drop down properties.\n * @returns The rendered ETF selection drop down.\n */\nexport function ETFSelectionDropDown(props: ETFSelectionDropDownProps) {\n    return (\n        <div className=\"dropdown position-relative mb-1\">\n            <button\n                className=\"btn btn-secondary dropdown-toggle is-invalid\"\n                type=\"button\"\n                id=\"ETFSelectionDropDown\"\n                data-bs-toggle=\"dropdown\"\n                aria-expanded=\"false\">\n                {props.label}\n            </button>\n            <ErrorMessage {...props} />\n            <ul className=\"dropdown-menu\" aria-labelledby=\"ETFSelectionDropDown\">\n                {Object.keys(props.elements).map(elementIdentifier => (\n                    <li key={elementIdentifier}>\n                        <button\n                            className={\n                                props.elements[elementIdentifier].selected ? 'dropdown-item active' : 'dropdown-item'\n                            }\n                            type=\"button\"\n                            onClick={(e: MouseEvent<HTMLButtonElement>) => {\n                                // Skip all events from the text input field.\n                                if (!(e.target instanceof HTMLInputElement)) {\n                                    props.handleSelectionChange(props.elements[elementIdentifier]);\n                                }\n                            }}>\n                            <ETFTextInputElement\n                                {...props.elements[elementIdentifier]}\n                                value={props.elements[elementIdentifier].value}\n                                textAppending=\"%\"\n                                onValueChange={props.handleShareChange}\n                                disabled={props.autoPercentage}\n                                isValid={true}\n                                errorMessage=\"\"\n                            />\n                        </button>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n}\n","import { TextOrNumberInputElement, InputLabel, INumberInputState } from './TextInputElement';\n\nexport interface IConfidence {\n    minConfidence: INumberInputState;\n    maxConfidence: INumberInputState;\n    middleConfidence: INumberInputState;\n}\n\n/**\n * Renders the confidence UI. Consists of a slider and two numeric inputs.\n *\n * @param props The confidence properties consisting of three INumberInputState.\n * @returns The rendering of the confidence UI.\n */\nexport function ConfidenceElement(props: IConfidence) {\n    return (\n        <div className=\"confidence\">\n            <InputLabel {...props.minConfidence} />\n            <div className=\"row\">\n                <div className=\"col\">\n                    <TextOrNumberInputElement {...props.minConfidence} noLabel={true} />\n                </div>\n                <div className=\"col-1\">-</div>\n                <div className=\"col\">\n                    <TextOrNumberInputElement {...props.maxConfidence} noLabel={true} />\n                </div>\n            </div>\n            <InputLabel {...props.middleConfidence} />\n            <div className=\"row\">\n                <div className=\"col align-self-center\">\n                    <input\n                        type=\"range\"\n                        className=\"form-range position-relative\"\n                        min={props.minConfidence.value}\n                        max={props.maxConfidence.value}\n                        step={0.1}\n                        value={props.middleConfidence.value}\n                        onChange={e =>\n                            props.middleConfidence.onValueChange(\n                                e.target.value,\n                                props.middleConfidence.identifier,\n                                true\n                            )\n                        }\n                    />\n                </div>\n                <div className=\"col-5 align-self-center\">\n                    <TextOrNumberInputElement {...props.middleConfidence} noLabel={true} />\n                </div>\n            </div>\n        </div>\n    );\n}\n","import React from 'react';\nimport { Visualization, ICostConfiguration } from './Visualization';\nimport {\n    TextOrNumberInputElement,\n    INumberInputState,\n    TextInputStateIdentifier,\n    NumberInputStateIdentifier,\n} from './TextInputElement';\nimport { CheckboxInputElement, ICheckboxState, ICheckBoxStateIdentifier } from './CheckboxInputElement';\nimport { Overlay, IAPIKey } from './APIKeyOverlay';\nimport { SidebarSectionHeading } from './SidebarSectionHeadingComponent';\nimport { BrokerDropDown, BrokerProperties, IBrokerDropDown } from './BrokerDropDown';\nimport { GraphDetailDropDown, IGraphDetailDropDown, IGraphDetailLevel } from './GraphDetailDropDown';\nimport { ETFSelectionDropDown, IETFSelection } from './ETFSelectionDropDown';\nimport { ForecastModelSingleton, ETFIdentifier, IETFProperty } from '../model/ForecastModel';\nimport { percentageToFloat, isPercentage, isPositiveInt } from '../helpers/utils';\nimport { ConfidenceElement } from './ConfidenceElement';\n\nexport const STARTING_CAPITAL_IDENTIFIER = 'startingCapital';\nexport const MONTHLY_INVESTMENT_IDENTIFIER = 'monthlyInvestment';\nexport const YEARLY_INVESTMENT_INCREASE_IDENTIFIER = 'yearlyInvestmentIncrease';\nexport const TRANSACTION_PERCENTAGE_COSTS_IDENTIFIER = 'transactionPercentageCosts';\nexport const TRANSACTION_FIXED_COSTS_IDENTIFIER = 'transactionFixedCosts';\nexport const SAVING_PHASE_IDENTIFIER = 'savingPhase';\nexport const AGE_IDENTIFIER = 'age';\nexport const TAX_FREE_AMOUNT_IDENTIFIER = 'taxFreeAmount';\nexport const MONTHLY_PAYOUT_IDENTIFIER = 'monthlyPayout';\nexport const YEARLY_PAYOUT_INCREASE_IDENTIFIER = 'yearlyPayoutIncrease';\nexport const LIFE_EXPECTATION_IDENTIFIER = 'lifeExpectation';\nexport const DETAILED_GRAPH_DROPDOWN_IDENTIFIER = 'detailedGraph';\nexport const ETF_DROPDOWN_SELECTION_IDENTIFIER = 'etfDropdownSelection';\nexport const API_KEY_IDENTIFIER = 'apiKey';\nexport const Y_AXIS_LOCK_IDENTIFIER = 'yAxisLock';\nexport const INFLATION_USED_FOR_TOTAL = 'inflationUsedForTotal';\nexport const MIN_CONFIDENCE = 'minConfidence';\nexport const MAX_CONFIDENCE = 'maxConfidence';\nexport const MIDDLE_CONFIDENCE = 'middleConfidence';\nexport const USE_DISTRIBUTION_MODEL = 'useDistributionModel';\nexport const USE_CONFIDENCE_VISUALIZATION = 'useConfidenceVisualization';\n\nconst BROKER_DROPDOWN_IDENTIFIER = 'brokerDropdown';\nconst ETF_AUTOMATIC_PERCENTAGE_IDENTIFIER = 'etfAutomaticPercentage';\n\nexport interface IAppState {\n    isValid: boolean;\n    startingCapital: INumberInputState;\n    monthlyInvestment: INumberInputState;\n    yearlyInvestmentIncrease: INumberInputState;\n    monthlyPayout: INumberInputState;\n    yearlyPayoutIncrease: INumberInputState;\n    transactionPercentageCosts: INumberInputState;\n    transactionFixedCosts: INumberInputState;\n    savingPhase: INumberInputState;\n    age: INumberInputState;\n    lifeExpectation: INumberInputState;\n    taxFreeAmount: INumberInputState;\n    minConfidence: INumberInputState;\n    maxConfidence: INumberInputState;\n    middleConfidence: INumberInputState;\n\n    apiKey: IAPIKey;\n\n    etfAutomaticPercentage: ICheckboxState;\n    yAxisLock: ICheckboxState;\n    inflationUsedForTotal: ICheckboxState;\n    useDistributionModel: ICheckboxState;\n    useConfidenceVisualization: ICheckboxState;\n\n    detailedGraph: IGraphDetailDropDown;\n    brokerDropdown: IBrokerDropDown;\n    etfDropdownSelection: IETFSelection;\n}\n\ntype ETFIdentifierToString = { [key in ETFIdentifier]: string };\n\nexport const ETF_SYMBOL_TO_NAME: ETFIdentifierToString = {\n    'SP5C.PAR': 'S & P 500',\n    ESGE: 'MSCI EM',\n    SUSA: 'MSCI USA ESG',\n};\n\n/**\n * Returns the cost configuration of the current app state.\n *\n * @param state The current app state.\n * @param transformPercentageToFloat If the percentage costs should be adjusted to a float. i.e. division by 100.\n * @returns The cost configuration.\n */\nexport function generateCostConfig(state: IAppState, transformPercentageToFloat = false): ICostConfiguration {\n    return {\n        percentageCosts: transformPercentageToFloat\n            ? percentageToFloat(state[TRANSACTION_PERCENTAGE_COSTS_IDENTIFIER].value)\n            : state[TRANSACTION_PERCENTAGE_COSTS_IDENTIFIER].value,\n        fixedCosts: state[TRANSACTION_FIXED_COSTS_IDENTIFIER].value,\n    };\n}\n\n/**\n * Recalculates the ETF percentages based on how many are selected.\n * This secures that the sum of all active percentages always equal 100%.\n *\n * @param state The state of the app.\n * @returns The manipulated state of the app.\n */\nfunction recalculateETFPercentages(state: IAppState): IAppState {\n    let numberOfSelectedETFs = 0;\n    for (const etfIdentifier in state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements) {\n        if (state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements[etfIdentifier].selected) {\n            numberOfSelectedETFs++;\n        }\n    }\n    const newPercentage = 100.0 / Math.max(1, numberOfSelectedETFs);\n    for (const etfIdentifier in state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements) {\n        if (state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements[etfIdentifier].selected) {\n            state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements[etfIdentifier].value = newPercentage;\n        }\n    }\n    return state;\n}\n\n/**\n * The class which renders the whole UI and holds the whole UI state with its interaction changes.\n * Also draws the visualizations.\n */\nexport class App extends React.Component<{}, IAppState> {\n    constructor(props: {}) {\n        super(props);\n\n        this.handleTextChange = this.handleTextChange.bind(this);\n        this.handleCheckBoxChange = this.handleCheckBoxChange.bind(this);\n        this.handleBrokerChange = this.handleBrokerChange.bind(this);\n        this.handleGraphDetailChange = this.handleGraphDetailChange.bind(this);\n        this.handleETFSelectionChange = this.handleETFSelectionChange.bind(this);\n        this.handleETFShareChange = this.handleETFShareChange.bind(this);\n        this.handleAPIKeyConfirm = this.handleAPIKeyConfirm.bind(this);\n\n        this.state = getInitialInputFormState(this);\n    }\n\n    /**\n     * Initiate the alphavantage key retrieval from the URL as soon as the component is mounted.\n     */\n    componentDidMount(){\n        pullAlphavantageKeyFromURL(this);\n    }\n\n    /**\n     * Handles the change of a text and applies its value to the state and validates it.\n     *\n     * @param changedValue The changed Value.\n     * @param changedStateIdentifier  The changed state identifier.\n     */\n    handleTextChange(\n        changedValue: string,\n        changedStateIdentifier: TextInputStateIdentifier,\n        stateIsNumber = false\n    ): void {\n        const state = { ...this.state };\n        state[changedStateIdentifier].value = stateIsNumber ? Number(changedValue) : changedValue;\n        this._validateAndSetState(state);\n    }\n\n    /**\n     * Handles the change of a checkbox and applies the change to the state and validates it.\n     *\n     * Does further adjustments if the specific checkbox needs further state changes.\n     * e.g. the  automatic percentage checkbox.\n     *\n     * @param changedStateIdentifier  The changed state identifier.\n     */\n    handleCheckBoxChange(changedStateIdentifier: ICheckBoxStateIdentifier): void {\n        const state = { ...this.state };\n        state[changedStateIdentifier].value = !state[changedStateIdentifier].value;\n        if (changedStateIdentifier === ETF_AUTOMATIC_PERCENTAGE_IDENTIFIER && state[changedStateIdentifier].value) {\n            recalculateETFPercentages(state);\n        }\n        this._validateAndSetState(state);\n    }\n\n    /**\n     * Handles the selection of a specific broker.\n     *\n     * @param brokerProperties The broker properties.\n     */\n    handleBrokerChange(brokerProperties: BrokerProperties): void {\n        const state = { ...this.state };\n        state[TRANSACTION_PERCENTAGE_COSTS_IDENTIFIER].value = brokerProperties.percentageCosts;\n        state[TRANSACTION_FIXED_COSTS_IDENTIFIER].value = brokerProperties.fixedCosts;\n        this._validateAndSetState(state);\n    }\n\n    /**\n     * Handles the selection of a specific graph detail.\n     *\n     * @param brokerProperties The graph detail properties.\n     */\n    handleGraphDetailChange(detailProperties: IGraphDetailLevel): void {\n        const state = { ...this.state };\n        state[DETAILED_GRAPH_DROPDOWN_IDENTIFIER].value = detailProperties.value;\n        this._validateAndSetState(state);\n    }\n\n    /**\n     * Handles the selection of a specific ETF.\n     *\n     * @param brokerProperties The ETF properties of the selected ETF.\n     */\n    handleETFSelectionChange(etfProperties: IETFProperty): void {\n        const state = { ...this.state };\n        state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements[etfProperties.identifier].selected =\n            !state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements[etfProperties.identifier].selected;\n        if (state[ETF_AUTOMATIC_PERCENTAGE_IDENTIFIER].value) {\n            recalculateETFPercentages(state);\n        }\n        this._validateAndSetState(state);\n    }\n\n    /**\n     * Handles the percentage value change of the etf selection.\n     *\n     * @param changedValue The changed  percentage value of the ETF.\n     * @param changedETFIdentifier The identifier of the ETF.\n     */\n    handleETFShareChange(changedValue: string, changedETFIdentifier: string): void {\n        const state = { ...this.state };\n        state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements[changedETFIdentifier].value = Number(changedValue);\n        this._validateAndSetState(state);\n    }\n\n    /**\n     * Handles the confirmation event of the API key and adjusts the URL accordingly.\n     */\n    async handleAPIKeyConfirm(): Promise<void> {\n        const apiKey = this.state[API_KEY_IDENTIFIER].value;\n        const apiValues = { ...this.state[API_KEY_IDENTIFIER] };\n        try {\n            await ForecastModelSingleton.loadHistoricData(\n                apiKey,\n                this.state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements\n            );\n            apiValues.error = false;\n            apiValues.displayOverlay = false;\n        } catch (e) {\n            apiValues.error = true;\n        }\n        // Adjust the URL.\n        const urlParams = new URLSearchParams(window.location.search);\n        const urlWithoutParams = window.location.href.split('?')[0];\n        urlParams.set(API_KEY_IDENTIFIER, apiKey);\n        //window.location.search = urlParams.toString();\n\n        window.history.replaceState(null, '', `${urlWithoutParams}?${urlParams.toString()}`);\n\n        this.setState({ [API_KEY_IDENTIFIER]: apiValues });\n        this.forceUpdate();\n    }\n\n    /**\n     * Checks if the updated state contains an invalid configuration.\n     *\n     * @param state The updated state of the App.\n     */\n    private _validateAndSetState(state: IAppState) {\n        const positiveIntIdentifiers: NumberInputStateIdentifier[] = [\n            MONTHLY_INVESTMENT_IDENTIFIER,\n            MONTHLY_PAYOUT_IDENTIFIER,\n            STARTING_CAPITAL_IDENTIFIER,\n            AGE_IDENTIFIER,\n            LIFE_EXPECTATION_IDENTIFIER,\n            SAVING_PHASE_IDENTIFIER,\n            TAX_FREE_AMOUNT_IDENTIFIER,\n        ];\n\n        const percentageIdentifiers: NumberInputStateIdentifier[] = [\n            YEARLY_INVESTMENT_INCREASE_IDENTIFIER,\n            YEARLY_PAYOUT_INCREASE_IDENTIFIER,\n            TRANSACTION_FIXED_COSTS_IDENTIFIER,\n            TRANSACTION_PERCENTAGE_COSTS_IDENTIFIER,\n            MIN_CONFIDENCE,\n            MAX_CONFIDENCE,\n            MIDDLE_CONFIDENCE,\n        ];\n\n        state.isValid = true;\n\n        for (const identifier of positiveIntIdentifiers) {\n            state[identifier].isValid = isPositiveInt(state[identifier].value);\n            state[identifier].errorMessage = 'Please enter a positive number.';\n            state.isValid = state[identifier].isValid && state.isValid;\n        }\n\n        for (const identifier of percentageIdentifiers) {\n            state[identifier].isValid = isPercentage(state[identifier].value);\n            state[identifier].errorMessage = 'Please enter a valid percentage between 0 and 100 %.';\n            state.isValid = state[identifier].isValid && state.isValid;\n        }\n\n        // Check the year values.\n        const leftoverYears = state[LIFE_EXPECTATION_IDENTIFIER].value - state[AGE_IDENTIFIER].value;\n        if (leftoverYears <= 0) {\n            state[AGE_IDENTIFIER].errorMessage = 'You cannot be older than the life expectation';\n            state[AGE_IDENTIFIER].isValid = false;\n            state.isValid = false;\n        } else if (leftoverYears <= state[SAVING_PHASE_IDENTIFIER].value) {\n            state[SAVING_PHASE_IDENTIFIER].errorMessage =\n                'You cannot have a saving phase that lasts longer than your life.';\n            state[SAVING_PHASE_IDENTIFIER].isValid = false;\n            state.isValid = false;\n        }\n\n        // Check the confidence.\n        if (state[MIN_CONFIDENCE].value > state[MAX_CONFIDENCE].value) {\n            state[MIN_CONFIDENCE].isValid = false;\n            state.isValid = false;\n            state[MIN_CONFIDENCE].errorMessage = 'The minimum confidence cannot be higher than the maximum confidence.';\n        }\n\n        // Check the etf percentages.\n        let sumOfPercentages = 0;\n        let foundOneSelectedEtf = false;\n        for (const etfIdentifier in state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements) {\n            if (state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements[etfIdentifier].selected) {\n                sumOfPercentages += percentageToFloat(\n                    state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements[etfIdentifier].value\n                );\n                foundOneSelectedEtf = true;\n            }\n        }\n        if (!foundOneSelectedEtf) {\n            state[ETF_DROPDOWN_SELECTION_IDENTIFIER].isValid = false;\n            state[ETF_DROPDOWN_SELECTION_IDENTIFIER].errorMessage = 'Please select at least one ETF.';\n            state.isValid = false;\n        } else if (sumOfPercentages !== 1.0) {\n            state[ETF_DROPDOWN_SELECTION_IDENTIFIER].isValid = false;\n            state[ETF_DROPDOWN_SELECTION_IDENTIFIER].errorMessage = 'The sum of all selected ETFs need to be 100%.';\n            state.isValid = false;\n        } else {\n            state[ETF_DROPDOWN_SELECTION_IDENTIFIER].isValid = true;\n        }\n\n        this.setState(state);\n    }\n\n    /**\n     * Renders the whole page based on the state of the app.\n     *\n     * @returns The Page content.\n     */\n    render() {\n        const costConfig = generateCostConfig(this.state);\n        return (\n            <div className=\"container-fluid\">\n                <Overlay {...this.state[API_KEY_IDENTIFIER]} />\n                <div className=\"row row-cols-3\">\n                    <nav id=\"sidebarMenu\" className=\"col-md-3 col-lg-2 bg-light sidebar\">\n                        <form className=\"position-sticky needs-validation\" noValidate>\n                            {/* Money Options */}\n                            <SidebarSectionHeading title=\"Money Options\" initiallyCollapsed={false}>\n                                <TextOrNumberInputElement {...this.state[STARTING_CAPITAL_IDENTIFIER]} />\n                                <TextOrNumberInputElement {...this.state[MONTHLY_INVESTMENT_IDENTIFIER]} />\n                                <TextOrNumberInputElement {...this.state[YEARLY_INVESTMENT_INCREASE_IDENTIFIER]} />\n                                <TextOrNumberInputElement {...this.state[MONTHLY_PAYOUT_IDENTIFIER]} />\n                                <TextOrNumberInputElement {...this.state[YEARLY_PAYOUT_INCREASE_IDENTIFIER]} />\n                                <TextOrNumberInputElement {...this.state[TAX_FREE_AMOUNT_IDENTIFIER]} />\n                                <CheckboxInputElement {...this.state[USE_DISTRIBUTION_MODEL]} />\n                            </SidebarSectionHeading>\n                            {/* Time Options */}\n                            <SidebarSectionHeading title=\"Time Options\" initiallyCollapsed={false}>\n                                <TextOrNumberInputElement {...this.state[AGE_IDENTIFIER]} />\n                                <TextOrNumberInputElement {...this.state[LIFE_EXPECTATION_IDENTIFIER]} />\n                                <TextOrNumberInputElement {...this.state[SAVING_PHASE_IDENTIFIER]} />\n                            </SidebarSectionHeading>\n                            {/* Cost Options */}\n                            <SidebarSectionHeading title=\"Cost Options\" initiallyCollapsed={true}>\n                                <BrokerDropDown {...costConfig} {...this.state[BROKER_DROPDOWN_IDENTIFIER]} />\n                                <TextOrNumberInputElement {...this.state[TRANSACTION_PERCENTAGE_COSTS_IDENTIFIER]} />\n                                <TextOrNumberInputElement {...this.state[TRANSACTION_FIXED_COSTS_IDENTIFIER]} />\n                            </SidebarSectionHeading>\n                            {/* Visualization Options */}\n                            <SidebarSectionHeading title=\"Visualization Options\" initiallyCollapsed={true}>\n                                <GraphDetailDropDown {...this.state[DETAILED_GRAPH_DROPDOWN_IDENTIFIER]} />\n                                <CheckboxInputElement {...this.state[Y_AXIS_LOCK_IDENTIFIER]} />\n                                <CheckboxInputElement {...this.state[INFLATION_USED_FOR_TOTAL]} />\n                                <CheckboxInputElement {...this.state[ETF_AUTOMATIC_PERCENTAGE_IDENTIFIER]} />\n                                <ETFSelectionDropDown\n                                    autoPercentage={this.state[ETF_AUTOMATIC_PERCENTAGE_IDENTIFIER].value}\n                                    {...this.state[ETF_DROPDOWN_SELECTION_IDENTIFIER]}\n                                />\n                                <CheckboxInputElement {...this.state[USE_CONFIDENCE_VISUALIZATION]} />\n                                <ConfidenceElement\n                                    minConfidence={this.state[MIN_CONFIDENCE]}\n                                    maxConfidence={this.state[MAX_CONFIDENCE]}\n                                    middleConfidence={this.state[MIDDLE_CONFIDENCE]}\n                                />\n                            </SidebarSectionHeading>\n                        </form>\n                    </nav>\n                    {/* Needed as padding since the sidebar is not part of the row */}\n                    <div id=\"sidebarMenu\" className=\"col-md-3 col-lg-2\">\n                        <h1>Padding</h1>\n                    </div>\n                    <main className=\"col-md-9 col-lg-10\">\n                        <h1>Etf Pension Plan Visualization</h1>\n                        <Visualization {...this.state} />\n                    </main>\n                </div>\n            </div>\n        );\n    }\n}\n\n/**\n * Generates the initial app state.\n *\n * @param caller The calling instance of the App class.\n * @returns The initial app state.\n */\nfunction getInitialInputFormState(caller: App): IAppState {\n    return {\n        isValid: true,\n        // simple ui elements.\n        [STARTING_CAPITAL_IDENTIFIER]: {\n            value: 1000,\n            label: 'Starting Capital',\n            errorMessage: '',\n            textAppending: '€',\n            isValid: true,\n            identifier: STARTING_CAPITAL_IDENTIFIER,\n            onValueChange: caller.handleTextChange,\n            disabled: false,\n        },\n        [MONTHLY_INVESTMENT_IDENTIFIER]: {\n            value: 100,\n            label: 'Monthly Investment',\n            errorMessage: 'Please enter a positive Money amount.',\n            textAppending: '€',\n            isValid: true,\n            identifier: MONTHLY_INVESTMENT_IDENTIFIER,\n            onValueChange: caller.handleTextChange,\n            disabled: false,\n        },\n        [YEARLY_INVESTMENT_INCREASE_IDENTIFIER]: {\n            value: 0.0,\n            label: 'Yearly Investment Increase',\n            errorMessage: '',\n            textAppending: '%',\n            isValid: true,\n            identifier: YEARLY_INVESTMENT_INCREASE_IDENTIFIER,\n            onValueChange: caller.handleTextChange,\n            disabled: false,\n        },\n        [MONTHLY_PAYOUT_IDENTIFIER]: {\n            value: 1000,\n            label: 'Monthly Payout',\n            errorMessage: '',\n            textAppending: '€',\n            isValid: true,\n            identifier: MONTHLY_PAYOUT_IDENTIFIER,\n            onValueChange: caller.handleTextChange,\n            disabled: false,\n        },\n        [YEARLY_PAYOUT_INCREASE_IDENTIFIER]: {\n            value: 0.0,\n            label: 'Yearly Payout Increase',\n            errorMessage: '',\n            textAppending: '%',\n            isValid: true,\n            identifier: YEARLY_PAYOUT_INCREASE_IDENTIFIER,\n            onValueChange: caller.handleTextChange,\n            disabled: false,\n        },\n        [TRANSACTION_PERCENTAGE_COSTS_IDENTIFIER]: {\n            value: 1.5,\n            label: 'Percentage Transaction Costs',\n            errorMessage: '',\n            textAppending: '%',\n            isValid: true,\n            identifier: TRANSACTION_PERCENTAGE_COSTS_IDENTIFIER,\n            onValueChange: caller.handleTextChange,\n            disabled: false,\n        },\n        [TRANSACTION_FIXED_COSTS_IDENTIFIER]: {\n            value: 0,\n            label: 'Fixed Transaction Costs',\n            errorMessage: '',\n            textAppending: '€',\n            isValid: true,\n            identifier: TRANSACTION_FIXED_COSTS_IDENTIFIER,\n            onValueChange: caller.handleTextChange,\n            disabled: false,\n        },\n        [SAVING_PHASE_IDENTIFIER]: {\n            value: 40,\n            label: 'Saving Phase',\n            errorMessage: '',\n            textAppending: 'Years',\n            isValid: true,\n            identifier: SAVING_PHASE_IDENTIFIER,\n            onValueChange: caller.handleTextChange,\n            disabled: false,\n        },\n        [AGE_IDENTIFIER]: {\n            value: 30,\n            label: 'Your Age',\n            textAppending: 'Years',\n            errorMessage: '',\n            isValid: true,\n            identifier: AGE_IDENTIFIER,\n            onValueChange: caller.handleTextChange,\n            disabled: false,\n        },\n        [LIFE_EXPECTATION_IDENTIFIER]: {\n            value: 80,\n            label: 'Life Expectation',\n            errorMessage: '',\n            isValid: true,\n            textAppending: 'Years',\n            identifier: LIFE_EXPECTATION_IDENTIFIER,\n            onValueChange: caller.handleTextChange,\n            disabled: false,\n        },\n        [TAX_FREE_AMOUNT_IDENTIFIER]: {\n            value: 801,\n            label: 'Tax Free Amount',\n            errorMessage: '',\n            isValid: true,\n            textAppending: '€',\n            identifier: TAX_FREE_AMOUNT_IDENTIFIER,\n            onValueChange: caller.handleTextChange,\n            disabled: false,\n        },\n        [MIN_CONFIDENCE]: {\n            value: 70,\n            label: 'Confidence Interval',\n            errorMessage: '',\n            isValid: true,\n            textAppending: '%',\n            identifier: MIN_CONFIDENCE,\n            onValueChange: caller.handleTextChange,\n            disabled: false,\n        },\n        [MAX_CONFIDENCE]: {\n            value: 100,\n            label: '',\n            errorMessage: '',\n            isValid: true,\n            textAppending: '',\n            identifier: MAX_CONFIDENCE,\n            onValueChange: caller.handleTextChange,\n            disabled: false,\n        },\n        [MIDDLE_CONFIDENCE]: {\n            value: 90,\n            label: 'Confidence for the Calculation',\n            errorMessage: '',\n            isValid: true,\n            textAppending: '%',\n            identifier: MIDDLE_CONFIDENCE,\n            onValueChange: caller.handleTextChange,\n            disabled: false,\n        },\n        [ETF_AUTOMATIC_PERCENTAGE_IDENTIFIER]: {\n            value: false,\n            label: 'Automatic ETF Ratio',\n            identifier: ETF_AUTOMATIC_PERCENTAGE_IDENTIFIER,\n            onValueChange: caller.handleCheckBoxChange,\n        },\n        [INFLATION_USED_FOR_TOTAL]: {\n            value: false,\n            label: 'Subtract Inflation of Total',\n            identifier: INFLATION_USED_FOR_TOTAL,\n            onValueChange: caller.handleCheckBoxChange,\n        },\n        [USE_CONFIDENCE_VISUALIZATION]: {\n            value: false,\n            label: 'Show Confidence',\n            identifier: USE_CONFIDENCE_VISUALIZATION,\n            onValueChange: caller.handleCheckBoxChange,\n        },\n        [USE_DISTRIBUTION_MODEL]: {\n            value: false,\n            label: 'Use Distribution Model',\n            identifier: USE_DISTRIBUTION_MODEL,\n            onValueChange: caller.handleCheckBoxChange,\n        },\n        [Y_AXIS_LOCK_IDENTIFIER]: {\n            value: false,\n            label: 'Lock Y Axis Extent',\n            identifier: Y_AXIS_LOCK_IDENTIFIER,\n            onValueChange: caller.handleCheckBoxChange,\n        },\n        [API_KEY_IDENTIFIER]: {\n            displayOverlay: true,\n            error: false,\n            value: 'defaultPaperKey',\n            label: '',\n            errorMessage: '',\n            isValid: true,\n            textAppending: '',\n            identifier: API_KEY_IDENTIFIER,\n            onValueChange: caller.handleTextChange,\n            handleAPIKeyConfirm: caller.handleAPIKeyConfirm,\n        },\n        // Complex UI elements.\n        [DETAILED_GRAPH_DROPDOWN_IDENTIFIER]: {\n            value: 1,\n            label: 'Graph Detail Level',\n            isValid: true,\n            handleChange: caller.handleGraphDetailChange,\n            elements: [\n                {\n                    identifier: '12',\n                    value: 12,\n                    label: 'All Months a Year (high detail)',\n                },\n                {\n                    identifier: '4',\n                    value: 4,\n                    label: 'Every 4th Month (middle detail)',\n                },\n                {\n                    identifier: '1',\n                    value: 1,\n                    label: 'One Month a Year (low detail)',\n                },\n            ],\n        },\n        [BROKER_DROPDOWN_IDENTIFIER]: {\n            label: 'Broker',\n            isValid: true,\n            handleChange: caller.handleBrokerChange,\n            elements: [\n                {\n                    identifier: 'comdirect',\n                    label: 'comdirect',\n                    fixedCosts: 0,\n                    percentageCosts: 1.5,\n                },\n                {\n                    identifier: 'tradeRepublic',\n                    label: 'Trade Republic',\n                    fixedCosts: 0,\n                    percentageCosts: 1.0,\n                },\n                {\n                    identifier: 'ing',\n                    label: 'ing',\n                    fixedCosts: 4.99,\n                    percentageCosts: 0.25,\n                },\n            ],\n        },\n        [ETF_DROPDOWN_SELECTION_IDENTIFIER]: {\n            label: 'ETF Selection',\n            isValid: true,\n            identifier: ETF_DROPDOWN_SELECTION_IDENTIFIER,\n            errorMessage: '',\n            handleSelectionChange: caller.handleETFSelectionChange,\n            handleShareChange: caller.handleETFShareChange,\n            elements: {\n                S_and_P_500: {\n                    identifier: 'S_and_P_500',\n                    symbol: 'SP5C.PAR',\n                    label: ETF_SYMBOL_TO_NAME['SP5C.PAR'],\n                    value: 100,\n                    selected: true,\n                },\n                iShare: {\n                    identifier: 'iShare',\n                    symbol: 'ESGE',\n                    label: ETF_SYMBOL_TO_NAME['ESGE'],\n                    value: 100,\n                    selected: false,\n                },\n                msciUSA: {\n                    identifier: 'msciUSA',\n                    symbol: 'SUSA',\n                    label: ETF_SYMBOL_TO_NAME['SUSA'],\n                    value: 100,\n                    selected: false,\n                },\n            },\n        },\n    };\n}\n\n/**\n     * Looks if the url contains an alphavantage key and applies it to the caller state if present.\n     *\n     * @param caller The calling instance of the App class.\n     */\n function pullAlphavantageKeyFromURL(caller: App): void {\n    const params = new URLSearchParams(window.location.search);\n    if (params.has(API_KEY_IDENTIFIER) && (params.get(API_KEY_IDENTIFIER) !== \"\" || params.get(API_KEY_IDENTIFIER) != null)){\n        caller.state.apiKey.value = params.get(API_KEY_IDENTIFIER) as string;\n        caller.handleAPIKeyConfirm();\n    }\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './scss/main.scss';\nimport { App } from './components/App';\nimport reportWebVitals from './reportWebVitals';\n// Needed to make the drop downs work.\nimport { Dropdown, Tooltip } from 'bootstrap'; // eslint-disable-line no-unused-vars\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}